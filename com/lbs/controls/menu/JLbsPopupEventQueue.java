/*      */ package com.lbs.controls.menu;
/*      */ 
/*      */ import com.lbs.control.interfaces.ILbsComponent;
/*      */ import com.lbs.control.interfaces.ILbsEventQueueListener;
/*      */ import com.lbs.control.interfaces.ILbsPopupMenu;
/*      */ import com.lbs.control.interfaces.ILbsPopupMenuItem;
/*      */ import com.lbs.controls.ILbsComponentBase;
/*      */ import com.lbs.controls.ILbsGridComponent;
/*      */ import com.lbs.controls.ILbsInplaceEditorBase;
/*      */ import com.lbs.controls.JLbsComponentHelper;
/*      */ import com.lbs.controls.JLbsControlHelper;
/*      */ import com.lbs.controls.JLbsEventRecorderHelper;
/*      */ import com.lbs.controls.JLbsSwingUtilities;
/*      */ import com.lbs.controls.numericedit.JLbsNumericEdit;
/*      */ import com.lbs.controls.tablereport.TableReportDlg;
/*      */ import com.lbs.controls.tablereport.TableReportInfo;
/*      */ import com.lbs.globalization.ILbsCultureInfo;
/*      */ import com.lbs.resource.JLbsLocalizer;
/*      */ import com.lbs.util.JLbsConstants;
/*      */ import com.lbs.util.JLbsDialog;
/*      */ import com.lbs.util.JLbsFrame;
/*      */ import com.lbs.util.JLbsInternalFrame;
/*      */ import com.lbs.util.JLbsOpenWindowListing;
/*      */ import com.lbs.util.JLbsStringList;
/*      */ import com.lbs.util.JLbsStringListItem;
/*      */ import com.lbs.util.JLbsStringUtil;
/*      */ import com.lbs.util.LbsClassInstanceProvider;
/*      */ import java.awt.AWTEvent;
/*      */ import java.awt.BorderLayout;
/*      */ import java.awt.Color;
/*      */ import java.awt.Component;
/*      */ import java.awt.ComponentOrientation;
/*      */ import java.awt.Container;
/*      */ import java.awt.Dimension;
/*      */ import java.awt.EventQueue;
/*      */ import java.awt.FlowLayout;
/*      */ import java.awt.Graphics;
/*      */ import java.awt.Point;
/*      */ import java.awt.Toolkit;
/*      */ import java.awt.datatransfer.DataFlavor;
/*      */ import java.awt.datatransfer.Transferable;
/*      */ import java.awt.event.ActionEvent;
/*      */ import java.awt.event.KeyEvent;
/*      */ import java.awt.event.KeyListener;
/*      */ import java.awt.event.MouseEvent;
/*      */ import java.text.ParseException;
/*      */ import java.util.ArrayList;
/*      */ import javax.swing.AbstractAction;
/*      */ import javax.swing.Icon;
/*      */ import javax.swing.ImageIcon;
/*      */ import javax.swing.JComponent;
/*      */ import javax.swing.JDialog;
/*      */ import javax.swing.JLabel;
/*      */ import javax.swing.JMenu;
/*      */ import javax.swing.JMenuItem;
/*      */ import javax.swing.JPanel;
/*      */ import javax.swing.JPopupMenu;
/*      */ import javax.swing.JRootPane;
/*      */ import javax.swing.KeyStroke;
/*      */ import javax.swing.MenuSelectionManager;
/*      */ import javax.swing.SwingUtilities;
/*      */ import javax.swing.border.EmptyBorder;
/*      */ import javax.swing.text.JTextComponent;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ public class JLbsPopupEventQueue
/*      */   extends EventQueue
/*      */ {
/*      */   private static final String GRAPH2DVIEW_CLASS_NAME = "y.view.Graph2DView";
/*      */   public static final int ITEM_COUNT = 60;
/*      */   public static ILbsEventQueueListener ms_Listener;
/*      */   public static final int DATAEX_EXPORT = 110;
/*      */   public static final int DATAEX_IMPORT = 111;
/*      */   public static final int DATAEX_EXCEL = 112;
/*      */   public static final int DATAEX_FIRM = 113;
/*      */   
/*      */   public static class CenterIconMenuItem
/*      */     extends JMenuItem
/*      */   {
/*      */     private static final long serialVersionUID = 1L;
/*      */     static ImageIcon ms_ShowAllIcon;
/*      */     private JLbsPopupMenu m_Popup;
/*      */     
/*      */     public CenterIconMenuItem(String name, JLbsPopupMenu menu) {
/* 3190 */       super(name);
/*      */       
/* 3192 */       this.m_Popup = menu;
/* 3193 */       if (ms_ShowAllIcon == null) {
/* 3194 */         ms_ShowAllIcon = JLbsControlHelper.getImageIcon(getClass(), "MenuExpand.png");
/*      */       }
/*      */     }
/*      */ 
/*      */     
/*      */     public Dimension getPreferredSize() {
/* 3200 */       return new Dimension(150, ms_ShowAllIcon.getIconHeight() + 6);
/*      */     }
/*      */ 
/*      */ 
/*      */     
/*      */     protected void paintComponent(Graphics g) {
/* 3206 */       super.paintComponent(g);
/* 3207 */       g.drawImage(ms_ShowAllIcon.getImage(), (getWidth() - ms_ShowAllIcon.getIconWidth()) / 2, 2, null);
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void fireActionPerformed(ActionEvent event) {
/* 3214 */       JLbsSwingUtilities.invokeLater(this.m_Popup, new Runnable()
/*      */           {
/*      */             public void run()
/*      */             {
/* 3218 */               JLbsPopupEventQueue.CenterIconMenuItem.this.m_Popup.setShowAll(true);
/* 3219 */               JLbsPopupEventQueue.CenterIconMenuItem.this.m_Popup.setVisible(true);
/*      */             }
/*      */           });
/*      */     }
/*      */   } public enum ApplicationIdEnum { jGuar, Admin, EDefter; } protected IXUIFormTemplateManager m_XUITemplateManager = null; private JPopupMenu m_PopupMenu; private BasicAction m_Cut; private BasicAction m_Copy; private BasicAction m_Paste; private BasicAction m_SelectAll; private BasicAction m_HideSelectedColumn; private BasicAction m_ShowAllColumns; private BasicAction m_GridProperties; private BasicAction m_FilterGridProperties; private BasicAction m_ResetToDefaultValues; private BasicAction m_SavePreferences; private BasicAction m_SaveGeneralPreferences; private BasicAction m_SaveGeneralPreferencesForAll; private BasicAction m_RecordCountMenu; private BasicAction m_SelectedRecordCountMenu; private BasicAction m_ExpandTreeGridMenu; private BasicAction m_CollapseTreeGridMenu; private BasicAction m_RecordLog; private BasicAction m_PopUpSelectAllMenu; private BasicAction m_PopUpDeselectAllMenu; private BasicAction m_PopUpInvertSelectionMenu; private BasicAction m_PopupSelectWithCountMenu; private BasicAction m_DBRefresh; private BasicAction m_SwitchPeriod; private BasicAction m_Customize; private BasicAction m_RowColoring; private BasicAction m_LockAction; private BasicAction m_UnlockAction; private BasicAction m_ShortcutDefinition; private BasicAction m_BookmarkURLDefinition; private BasicAction m_ExportDefinition; private BasicAction m_ImportDefinition; private BasicAction m_ExportBrwToExcelDefinition; private BasicAction m_ExchangeFirmDefinition; private BasicAction m_RevisionHistory; private BasicAction m_InspectAsPivotVisible; private BasicAction m_InspectAsPivotAll; private BasicAction m_ViewAsTableReport; private BasicAction m_WorkflowStatusAction; private static String[] m_Captions = new String[] { "Cut", "Copy", "Paste", "Select All", "Hide Selected Column", "Show All Columns", "Grid Properties", "Start Template", "Finish Template", "Load From Template", "Restore Layout", "Save Preferences", "Save General Preferences", "Record Count", "List Report", "Grouped List Report", "Refresh", "Switch Period", "Select All", "Deselect All", "Inverse", "Customize", "Row Coloring", "Template Operations", "Preferences", "Reporting", "Selection", "Open Windows", "Active", "Custom Select", "Lock Record", "Unlock Record", "Define Shortcut", "Create Bookmark URL", "Export", "Import", "Data Exchange", "Revision History", "Transfer to Firm", "Inspect As Pivot", "Only Viewed Rows", "All Rows", "Record Info", "Table View", "Expand All", "Collapse All", "Export To Excel", "Show/Hide Pivot", "Edit", "Add Row", "Add Row to Bottom", "Delete Row", "Filter Properties", "", "", "", "", "Workflow Status", "Save General Preferences For All Firms", "Selected Record Count" }; private static final int GRID_ID = 83814585; private static final String GRID_ID_PROP = "GRID_ID_PROP"; private ILbsComponentBase m_OrjComp; private Object m_RootComp; private int m_ShortCutMask; private boolean isWebMode; public static final int ROW_INSERT = 1024; public static final int ROW_DELETE = 2048; public static final int ROW_APPEND = 4096; private static ApplicationIdEnum ms_ApplicationId; private static ComponentOrientation m_Orientation = ComponentOrientation.LEFT_TO_RIGHT; private static void getComponentOrientation() { ILbsCultureInfo cul = JLbsLocalizer.getCultureInfo(); if (cul != null) { ComponentOrientation orientation = cul.getComponentOrientation(); if (orientation != null) m_Orientation = orientation;  }  } public static ApplicationIdEnum getApplicationId() { return ms_ApplicationId; } public static void setApplicationId(ApplicationIdEnum m_ApplicationId) { ms_ApplicationId = m_ApplicationId; } public JLbsPopupEventQueue(String[] captions) { this(captions, false); } public JLbsPopupEventQueue(String[] captions, boolean isWebMode) { this.isWebMode = isWebMode; internalSetCaptions(captions); this.m_XUITemplateManager = JLbsComponentHelper.getFormTemplateManager(); try { this.m_ShortCutMask = Toolkit.getDefaultToolkit().getMenuShortcutKeyMask(); } catch (Exception exception) {} getComponentOrientation(); } public JLbsPopupEventQueue(String[] captions, Object context) { this(captions); (JLbsPopupEventQueueFieldHolder.getInstance()).m_Context = context; } private static void internalSetCaptions(String[] captions) { if (captions != null) { int length = Math.min(captions.length, 60); for (int idx = 0; idx < length; idx++) { if (!JLbsStringUtil.isEmpty(captions[idx])) m_Captions[idx] = captions[idx];  }  }  } public static void setEventQueueListener(ILbsEventQueueListener listener) { ms_Listener = listener; } public static void setCaptions(String[] captions) { internalSetCaptions(captions); } public void append2ExistingMenu(Component comp, JPopupMenu existingMenu) { this.m_PopupMenu = null; if (comp instanceof ILbsComponentBase) this.m_OrjComp = (ILbsComponentBase)comp;  if (existingMenu instanceof JLbsPopupMenu) if (!((JLbsPopupMenu)existingMenu).isDynamicMenuExtensionEnabled()) return;   Component root = comp; if (!(comp instanceof JLbsDialog) && !(comp instanceof JLbsFrame) && !(comp instanceof JLbsInternalFrame)) if (JLbsConstants.DESKTOP_MODE) { JRootPane pane = SwingUtilities.getRootPane(comp); if (pane != null) root = pane.getParent();  } else { root = SwingUtilities.getRoot(comp); }   if (!this.isWebMode && !JLbsComponentHelper.hasRecord(comp)) if (existingMenu instanceof ILbsPopupMenu) for (int i = 0; i < existingMenu.getComponentCount(); i++) { if (existingMenu.getComponent(i) instanceof JLbsPopupMenuItem && existingMenu.getComponent(i).isEnabled()) { int tag = ((ILbsPopupMenuItem)existingMenu.getComponent(i)).getTag(); existingMenu.getComponent(i).setEnabled(JLbsComponentHelper.getPopupItemVisibility((ILbsPopupMenu)existingMenu, tag)); }  }    createTemplatePopupMenu(root, existingMenu); createPreferencePopupMenu(root, existingMenu); createSwitchPeriodMenu(root, existingMenu); createCustomizePopupMenu(root, existingMenu); if (JLbsConstants.WF_STATUS_URL != null && !"".equals(JLbsConstants.WF_STATUS_URL)) createWorkflowStatusPopupMenu(root, existingMenu);  createOpenWindowsPopupMenu(root, existingMenu); createShortcutDefinitionsPopupMenu(root, existingMenu); createBookmarkURLPopupMenu(root, existingMenu); createRevisionHistoryPopupMenu(root, existingMenu); createAdditionalMenu(comp, existingMenu); if (comp instanceof ILbsComponentBase) if (JLbsComponentHelper.isTreeGrid((ILbsComponentBase)comp)) { ILbsGridComponent gridComp = (ILbsGridComponent)comp; createExpandCollapse(gridComp, (this.m_PopupMenu == null) ? existingMenu : this.m_PopupMenu); }   boolean hasGrid = false; if (comp instanceof ILbsInplaceEditorBase) { ILbsGridComponent gridComp = ((ILbsInplaceEditorBase)comp).getOwnerGrid(); hasGrid = true; createPopupMenu(gridComp, (this.m_PopupMenu == null) ? existingMenu : this.m_PopupMenu); } else if (comp instanceof JTextComponent) { createPopupMenu((JTextComponent)comp, (this.m_PopupMenu == null) ? existingMenu : this.m_PopupMenu); } else if (comp instanceof ILbsGridComponent) { createPopupMenu((ILbsGridComponent)comp, (this.m_PopupMenu == null) ? existingMenu : this.m_PopupMenu); hasGrid = true; }  if (!hasGrid && comp instanceof ILbsComponentBase) createRecordInfoMenu((ILbsComponentBase)comp, (this.m_PopupMenu == null) ? existingMenu : this.m_PopupMenu);  if (hasFormProps(root) && !JLbsConstants.EVENT_RECORDING && !JLbsConstants.TEST_PLAYING && this.m_PopupMenu instanceof JLbsPopupMenu && !((JLbsPopupMenu)this.m_PopupMenu).isShowAll()) try { filterPopupMenuItemsbyUsages(root); } catch (Exception e) { e.printStackTrace(); }   } private boolean createWorkflowStatusPopupMenu(Component root, JPopupMenu existingMenu) { ILbsComponentBase orjComp = null; if (this.m_OrjComp != null) { orjComp = this.m_OrjComp; } else if (root instanceof ILbsComponentBase) { orjComp = (ILbsComponentBase)root; }  if (existingMenu != null) { this.m_PopupMenu = existingMenu; } else { this.m_PopupMenu = new JPopupMenu(); }  if (!isQueryGrid(orjComp) || isQueryGridMultiSelected(orjComp)) return false;  if (!fireCanAppendEvent(this.m_PopupMenu, 18)) return false;  if ((JLbsPopupEventQueueFieldHolder.getInstance()).m_Context != null) { this.m_PopupMenu.applyComponentOrientation(m_Orientation); this.m_WorkflowStatusAction = new WorkflowStatusAction(m_Captions[57], null); this.m_WorkflowStatusAction.setSourceComponent(orjComp); this.m_PopupMenu.add(this.m_WorkflowStatusAction).applyComponentOrientation(m_Orientation); }  return true; } private void filterPopupMenuItemsbyUsages(Component rootComponent) { CenterIconMenuItem showAllIconMenuItem = new CenterIconMenuItem(" ", (JLbsPopupMenu)this.m_PopupMenu); JLbsPopupMenu currentMenu = (JLbsPopupMenu)this.m_PopupMenu; for (int i = 0; i < currentMenu.getComponentCount(); i++) { Component popupItem = currentMenu.getComponent(i); if (popupItem instanceof JLbsPopupMenuItem) { JLbsPopupMenuItem popupMenuItem = (JLbsPopupMenuItem)popupItem; if (JLbsComponentHelper.getPopupItemUsagesCount(rootComponent, Integer.toString(popupMenuItem.getId())) > 0) continue;  } else if (popupItem instanceof JMenu) { JPopupMenu menu = ((JMenu)popupItem).getPopupMenu(); boolean subMenuFound = false; for (int k = 0; k < menu.getComponentCount(); k++) { if (menu.getComponent(k) instanceof JLbsPopupMenuItem) { JLbsPopupMenuItem submenuItem = (JLbsPopupMenuItem)menu.getComponent(k); Integer parentTag = (Integer)submenuItem.getClientProperty(JLbsComponentHelper.getParentPopupTagConstant()); String ParentTagStr = ""; if (parentTag != null) ParentTagStr = parentTag.toString();  if (JLbsComponentHelper.getPopupItemUsagesCount(rootComponent, String.valueOf(ParentTagStr) + Integer.toString(submenuItem.getId())) > 0) { subMenuFound = true; break; }  } else if (menu.getComponent(k) instanceof JMenuItem) { JMenuItem menuItem = (JMenuItem)menu.getComponent(k); if (menuItem.getAction() != null && JLbsComponentHelper.getPopupItemUsagesCount(rootComponent, menuItem.getAction().getClass().getName()) > 0) { subMenuFound = true; break; }  }  }  if (subMenuFound) continue;  } else if (popupItem instanceof JMenuItem) { JMenuItem menuItem = (JMenuItem)popupItem; if (menuItem.getAction() != null && JLbsComponentHelper.getPopupItemUsagesCount(rootComponent, menuItem.getAction().getClass().getName()) > 0) continue;  }  if (popupItem instanceof JPopupMenu.Separator) if (i > 0 && !(currentMenu.getComponent(i - 1) instanceof JPopupMenu.Separator)) continue;   currentMenu.remove(i); i--; continue; }  this.m_PopupMenu.add(showAllIconMenuItem); } private void createAdditionalMenu(Object comp, JPopupMenu existingMenu) { if (ms_Listener == null || !(comp instanceof ILbsComponent)) return;  ILbsComponent lbsComp = (ILbsComponent)comp; JLbsStringList list = ms_Listener.getPopupMenuItems(JLbsComponentHelper.getXUIPane((ILbsComponentBase)lbsComp), lbsComp); if (list == null || list.size() == 0) return;  if (existingMenu != null) { this.m_PopupMenu = existingMenu; } else { this.m_PopupMenu = new JPopupMenu(); }  if (this.m_PopupMenu.getComponentCount() > 0) this.m_PopupMenu.addSeparator();  this.m_PopupMenu.applyComponentOrientation(m_Orientation); for (int i = 0; i < list.size(); i++) { JLbsStringListItem item = list.getAt(i); this.m_PopupMenu.add(new CustomPopupMenuAction(item, lbsComp)).applyComponentOrientation(m_Orientation); }  } private boolean createShortcutDefinitionsPopupMenu(Object root, JPopupMenu existingMenu) { ILbsComponentBase orjComp = null; if (this.m_OrjComp != null) { orjComp = this.m_OrjComp; } else if (root instanceof ILbsComponentBase) { orjComp = (ILbsComponentBase)root; }  if (existingMenu != null) { this.m_PopupMenu = existingMenu; } else { this.m_PopupMenu = new JPopupMenu(); }  if (!fireCanAppendEvent(this.m_PopupMenu, 10)) return false;  if (hasXUIPane(orjComp)) { if ((JLbsPopupEventQueueFieldHolder.getInstance()).m_Context != null) { if (this.m_PopupMenu.getComponentCount() > 0) this.m_PopupMenu.addSeparator();  this.m_PopupMenu.applyComponentOrientation(m_Orientation); this.m_ShortcutDefinition = new ShortcutDefinition(m_Captions[32], null); this.m_ShortcutDefinition.setSourceComponent(orjComp); this.m_PopupMenu.add(this.m_ShortcutDefinition).applyComponentOrientation(m_Orientation); }  return true; }  return false; } private boolean createBookmarkURLPopupMenu(Object root, JPopupMenu existingMenu) { ILbsComponentBase orjComp = null; if (this.m_OrjComp != null) { orjComp = this.m_OrjComp; } else if (root instanceof ILbsComponentBase) { orjComp = (ILbsComponentBase)root; }  if (existingMenu != null) { this.m_PopupMenu = existingMenu; } else { this.m_PopupMenu = new JPopupMenu(); }  if (!JLbsComponentHelper.hasBookmarkURLRight(orjComp)) return false;  if (!fireCanAppendEvent(this.m_PopupMenu, 11)) return false;  if (JLbsComponentHelper.hasBookmarkSupport(orjComp)) { if ((JLbsPopupEventQueueFieldHolder.getInstance()).m_Context != null) { if (this.m_PopupMenu.getComponentCount() > 0) this.m_PopupMenu.addSeparator();  this.m_PopupMenu.applyComponentOrientation(m_Orientation); this.m_BookmarkURLDefinition = new BookmarkURLDefinition(m_Captions[33], null); this.m_BookmarkURLDefinition.setSourceComponent(orjComp); this.m_PopupMenu.add(this.m_BookmarkURLDefinition).applyComponentOrientation(m_Orientation); }  return true; }  return false; } private boolean createRevisionHistoryPopupMenu(Object root, JPopupMenu existingMenu) { if (ms_ApplicationId != ApplicationIdEnum.jGuar && ms_ApplicationId != ApplicationIdEnum.Admin) return false;  ILbsComponentBase orjComp = null; if (this.m_OrjComp != null) { orjComp = this.m_OrjComp; } else if (root instanceof ILbsComponentBase) { orjComp = (ILbsComponentBase)root; }  if (existingMenu != null) { this.m_PopupMenu = existingMenu; } else { this.m_PopupMenu = new JPopupMenu(); }  if (!fireCanAppendEvent(this.m_PopupMenu, 13)) return false;  if (hasRevisionHistory(orjComp)) { if ((JLbsPopupEventQueueFieldHolder.getInstance()).m_Context != null) { if (this.m_PopupMenu.getComponentCount() > 0) this.m_PopupMenu.addSeparator();  this.m_PopupMenu.applyComponentOrientation(m_Orientation); this.m_RevisionHistory = new RevisionHistory(m_Captions[37], null); this.m_RevisionHistory.setSourceComponent(orjComp); this.m_PopupMenu.add(this.m_RevisionHistory).applyComponentOrientation(m_Orientation); }  return true; }  return false; } private boolean createInspectAsPivotPopupMenu(Object root, JPopupMenu existingMenu) { if (ms_ApplicationId != ApplicationIdEnum.jGuar) return false;  if (isQueryGrid(this.m_OrjComp)) { if (existingMenu != null) { this.m_PopupMenu = existingMenu; } else { this.m_PopupMenu = new JPopupMenu(); }  if (!fireCanAppendEvent(this.m_PopupMenu, 15)) return false;  if (this.m_PopupMenu.getComponentCount() > 0) this.m_PopupMenu.addSeparator();  this.m_PopupMenu.applyComponentOrientation(m_Orientation); if (!hasPolicyLimit(this.m_OrjComp, 64)) { BasicAction pivotMenu = new InspectAsPivot(m_Captions[47], null, false); pivotMenu.setSourceComponent(this.m_OrjComp); this.m_PopupMenu.add(pivotMenu).applyComponentOrientation(m_Orientation); }  if (!hasPolicyLimit(this.m_OrjComp, 128)) { this.m_ViewAsTableReport = new ViewTableReport(m_Captions[43], null); this.m_ViewAsTableReport.setSourceComponent(this.m_OrjComp); this.m_PopupMenu.add(this.m_ViewAsTableReport).applyComponentOrientation(m_Orientation); }  return true; }  return false; } private boolean hasPolicyLimit(ILbsComponentBase orjComp, int actMask) { return JLbsComponentHelper.hasPolicyLimit(orjComp, actMask); } private boolean hasRevisionHistory(ILbsComponentBase source) { return JLbsComponentHelper.hasRevisionHistory(source); } private boolean createExchangePopupMenu(Object root, JPopupMenu existingMenu) { if (ms_ApplicationId != ApplicationIdEnum.jGuar && ms_ApplicationId != ApplicationIdEnum.Admin) return false;  if (ms_ApplicationId == ApplicationIdEnum.Admin && !isSuperUser()) return false;  ILbsComponentBase orjComp = null; if (root instanceof ILbsComponentBase) { orjComp = (ILbsComponentBase)root; } else if (this.m_OrjComp != null) { orjComp = this.m_OrjComp; }  if ((JLbsPopupEventQueueFieldHolder.getInstance()).m_Context != null && isQueryGrid(orjComp) && !hasPolicyLimit(this.m_OrjComp, 1024)) { if (existingMenu != null) { this.m_PopupMenu = existingMenu; } else { this.m_PopupMenu = new JPopupMenu(); }  if (!fireCanAppendEvent(this.m_PopupMenu, 12)) return false;  ArrayList<Integer> rightExList = (ms_ApplicationId != ApplicationIdEnum.Admin) ? JLbsComponentHelper.getDataExportOptionsRights(110, 113) : null; if (ms_ApplicationId == ApplicationIdEnum.Admin || rightExList.size() < 4) { JMenu exchangeMenu = new JMenu(m_Captions[36]); exchangeMenu.applyComponentOrientation(m_Orientation); appendDataExportSubMenuItem(orjComp, rightExList, exchangeMenu); appendDataImportSubMenuItem(orjComp, rightExList, exchangeMenu); appendDataExcelSubMenuItem(orjComp, rightExList, exchangeMenu); appendDataFirmSubMenuItem(orjComp, rightExList, exchangeMenu); if (exchangeMenu.getItemCount() > 0) { if (this.m_PopupMenu.getComponentCount() > 0) this.m_PopupMenu.addSeparator();  this.m_PopupMenu.applyComponentOrientation(m_Orientation); this.m_PopupMenu.add(exchangeMenu).setComponentOrientation(m_Orientation); }  return true; }  }  return false; } private void appendDataFirmSubMenuItem(ILbsComponentBase orjComp, ArrayList<Integer> rightExList, JMenu exchangeMenu) { if (!fireCanAppendEvent(this.m_PopupMenu, 106)) return;  if (rightExList == null || !rightExList.contains(Integer.valueOf(113))) { this.m_ExchangeFirmDefinition = new TransferToFirmDefinition(m_Captions[38], null); this.m_ExchangeFirmDefinition.setSourceComponent(orjComp); exchangeMenu.add(this.m_ExchangeFirmDefinition).setComponentOrientation(m_Orientation); }  } private void appendDataExcelSubMenuItem(ILbsComponentBase orjComp, ArrayList<Integer> rightExList, JMenu exchangeMenu) { if (!fireCanAppendEvent(this.m_PopupMenu, 105)) return;  if (rightExList == null || !rightExList.contains(Integer.valueOf(112))) { this.m_ExportBrwToExcelDefinition = new ExportBrwToExcelDefinition(m_Captions[46], null); this.m_ExportBrwToExcelDefinition.setSourceComponent(orjComp); exchangeMenu.add(this.m_ExportBrwToExcelDefinition).setComponentOrientation(m_Orientation); }  } private void appendDataImportSubMenuItem(ILbsComponentBase orjComp, ArrayList<Integer> rightExList, JMenu exchangeMenu) { if (!fireCanAppendEvent(this.m_PopupMenu, 104)) return;  if (rightExList == null || !rightExList.contains(Integer.valueOf(111))) { this.m_ImportDefinition = new ImportDefinition(m_Captions[35], null); this.m_ImportDefinition.setSourceComponent(orjComp); exchangeMenu.add(this.m_ImportDefinition).setComponentOrientation(m_Orientation); }  } private void appendDataExportSubMenuItem(ILbsComponentBase orjComp, ArrayList<Integer> rightExList, JMenu exchangeMenu) { if (!fireCanAppendEvent(this.m_PopupMenu, 103)) return;  if (rightExList == null || !rightExList.contains(Integer.valueOf(110))) { this.m_ExportDefinition = new ExportDefinition(m_Captions[34], null); this.m_ExportDefinition.setSourceComponent(orjComp); exchangeMenu.add(this.m_ExportDefinition).setComponentOrientation(m_Orientation); }  } private int userCanNotSeeReportFiltersProperties() { return JLbsComponentHelper.getUserCanNotSeeReportFiltersProperties((JLbsPopupEventQueueFieldHolder.getInstance()).m_Context); } private void createCustomizePopupMenu(Component root, JPopupMenu existingMenu) { if (ms_ApplicationId != ApplicationIdEnum.jGuar) return;  if (JLbsConstants.checkAppCloud() && !JLbsConstants.checkSAAS()) return;  if (!fireCanAppendEvent(this.m_PopupMenu, 19)) return;  if (JLbsConstants.EASY_CUST_ENABLED && isQueryGrid(this.m_OrjComp)) if ((JLbsPopupEventQueueFieldHolder.getInstance()).m_Context != null) { int custom = JLbsComponentHelper.getUserCanCustomize((JLbsPopupEventQueueFieldHolder.getInstance()).m_Context); if (custom == 1) { if (existingMenu != null) { this.m_PopupMenu = existingMenu; } else { this.m_PopupMenu = new JPopupMenu(); }  if (this.m_PopupMenu.getComponentCount() > 0) this.m_PopupMenu.addSeparator();  this.m_PopupMenu.applyComponentOrientation(m_Orientation); this.m_RootComp = root; this.m_Customize = new CustomizeAction(m_Captions[21], null); this.m_Customize.setSourceComponent(this.m_OrjComp); this.m_PopupMenu.add(this.m_Customize).setComponentOrientation(m_Orientation); }  }   } public void createPopupMenu(JTextComponent textComp) { createPopupMenu(textComp, (JPopupMenu)null); } public void createPopupMenu(ILbsGridComponent gridComp) { createPopupMenu(gridComp, (JPopupMenu)null); } public void createPopupMenu(JTextComponent textComp, JPopupMenu existingMenu) { this.m_Cut = new CutAction(m_Captions[0], null); this.m_Copy = new CopyAction(m_Captions[1], null); this.m_Paste = new PasteAction(m_Captions[2], null); this.m_SelectAll = new SelectAllAction(m_Captions[3], null); this.m_Cut.setTextComponent(textComp); this.m_Copy.setTextComponent(textComp); this.m_Paste.setTextComponent(textComp); this.m_SelectAll.setTextComponent(textComp); if (existingMenu != null) { this.m_PopupMenu = existingMenu; } else { this.m_PopupMenu = new JPopupMenu(); }  if (!fireCanAppendEvent(this.m_PopupMenu, 3)) return;  if (this.m_PopupMenu.getComponentCount() > 0) this.m_PopupMenu.addSeparator();  appendSubMenuItemCut(); appendSubMenuItemCopy(); appendSubMenuItemPaste(); if (this.m_PopupMenu.getComponentCount() > 0) this.m_PopupMenu.addSeparator();  appendSubMenuItemSelectAll(); } private void appendSubMenuItemSelectAll() { if (!fireCanAppendEvent(this.m_PopupMenu, 110)) return;  this.m_PopupMenu.add(this.m_SelectAll).setComponentOrientation(m_Orientation); } private void appendSubMenuItemPaste() { if (!fireCanAppendEvent(this.m_PopupMenu, 109)) return;  this.m_PopupMenu.add(this.m_Paste).setComponentOrientation(m_Orientation); } private void appendSubMenuItemCopy() { if (!fireCanAppendEvent(this.m_PopupMenu, 108)) return;  this.m_PopupMenu.add(this.m_Copy).setComponentOrientation(m_Orientation); } private void appendSubMenuItemCut() { if (!fireCanAppendEvent(this.m_PopupMenu, 107)) return;  this.m_PopupMenu.add(this.m_Cut).setComponentOrientation(m_Orientation); } public void createExpandCollapse(ILbsGridComponent gridComp, JPopupMenu existingMenu) { if (existingMenu != null) { this.m_PopupMenu = existingMenu; } else { this.m_PopupMenu = new JPopupMenu(); }  if (!fireCanAppendEvent(existingMenu, 0)) return;  if (existingMenu.getComponentCount() > 0) existingMenu.addSeparator();  this.m_PopupMenu.applyComponentOrientation(m_Orientation); this.m_ExpandTreeGridMenu = new ExpandCollapseAction(m_Captions[44], null, true); this.m_ExpandTreeGridMenu.setSourceComponent(gridComp); this.m_PopupMenu.add(this.m_ExpandTreeGridMenu).setComponentOrientation(m_Orientation); this.m_CollapseTreeGridMenu = new ExpandCollapseAction(m_Captions[45], null, false); this.m_CollapseTreeGridMenu.setSourceComponent(gridComp); this.m_PopupMenu.add(this.m_CollapseTreeGridMenu).setComponentOrientation(m_Orientation); } public void createSelectDeselect(ILbsGridComponent gridComp, JPopupMenu existingMenu) { if (existingMenu != null) { this.m_PopupMenu = existingMenu; } else { this.m_PopupMenu = new JPopupMenu(); }  if (!fireCanAppendEvent(existingMenu, 0)) return;  if (existingMenu.getComponentCount() > 0) existingMenu.addSeparator();  this.m_PopupMenu.applyComponentOrientation(m_Orientation); this.m_PopUpSelectAllMenu = new SelectAllRowAction(m_Captions[18], null); this.m_PopUpSelectAllMenu.setSourceComponent(gridComp); this.m_PopupMenu.add(this.m_PopUpSelectAllMenu).setComponentOrientation(m_Orientation); this.m_PopUpDeselectAllMenu = new DeselectAllRowAction(m_Captions[19], null); this.m_PopUpDeselectAllMenu.setSourceComponent(gridComp); this.m_PopupMenu.add(this.m_PopUpDeselectAllMenu).setComponentOrientation(m_Orientation); } public void createFilterProps(ILbsGridComponent gridComp, JPopupMenu existingMenu) { if (existingMenu != null) { this.m_PopupMenu = existingMenu; } else { this.m_PopupMenu = new JPopupMenu(); }  if (!fireCanAppendEvent(existingMenu, 17)) return;  if (existingMenu.getComponentCount() > 0) existingMenu.addSeparator();  this.m_PopupMenu.applyComponentOrientation(m_Orientation); this.m_FilterGridProperties = new FilterGridProperties(m_Captions[52], null); this.m_FilterGridProperties.setSourceComponent(gridComp); this.m_FilterGridProperties.setGridComponent(gridComp); if (userCanNotSeeReportFiltersProperties() == 0) this.m_PopupMenu.add(this.m_FilterGridProperties).setComponentOrientation(m_Orientation);  } public void createPopupMenu(ILbsGridComponent gridComp, JPopupMenu existingMenu) { if (((Component)gridComp).isEnabled() && JLbsComponentHelper.allowtoEditMenu(gridComp)) createEditMenu(gridComp, existingMenu);  createRecordCountMenu(gridComp, existingMenu); createSelectedRecordCountMenu(gridComp, existingMenu); if (JLbsComponentHelper.hasRecordInfo(gridComp)) createRecordInfoMenu((ILbsComponentBase)gridComp, existingMenu);  createListReportMenu(gridComp, existingMenu); createSelectionOptionsMenu(gridComp, existingMenu); createLockMenu(gridComp, existingMenu); createExchangePopupMenu(gridComp, existingMenu); createInspectAsPivotPopupMenu(gridComp, existingMenu); if (!JLbsConstants.FORMPROPS_CAN_BE_RECORDED) return;  Component root = (JComponent)gridComp; if (!(gridComp instanceof JLbsDialog) && !(gridComp instanceof JLbsFrame) && !(gridComp instanceof JLbsInternalFrame)) if (JLbsConstants.DESKTOP_MODE) { JRootPane pane = SwingUtilities.getRootPane((JComponent)gridComp); if (pane != null) root = pane.getParent();  } else { root = SwingUtilities.getRoot((JComponent)gridComp); }   this.m_HideSelectedColumn = new HideSelectedColumn(m_Captions[4], null); this.m_ShowAllColumns = new ShowAllColumns(m_Captions[5], null); if (hasFormProps(root) && !hasPolicyLimit(this.m_OrjComp, 2048)) this.m_GridProperties = new GridProperties(m_Captions[6], null);  this.m_HideSelectedColumn.setGridComponent(gridComp); this.m_ShowAllColumns.setGridComponent(gridComp); if (this.m_InspectAsPivotVisible != null) this.m_InspectAsPivotVisible.setGridComponent(gridComp);  if (this.m_InspectAsPivotAll != null) this.m_InspectAsPivotAll.setGridComponent(gridComp);  if (this.m_GridProperties != null) this.m_GridProperties.setGridComponent(gridComp);  if (existingMenu != null) { this.m_PopupMenu = existingMenu; } else { this.m_PopupMenu = new JPopupMenu(); }  if (!fireCanAppendEvent(this.m_PopupMenu, 1)) return;  if (this.m_PopupMenu.getComponentCount() > 0) this.m_PopupMenu.addSeparator();  this.m_PopupMenu.applyComponentOrientation(m_Orientation); JComponent component = (JComponent)gridComp; if (component != null) { boolean ok = true; Object obj = component.getClientProperty("GRID_ID_PROP"); if (obj instanceof Integer) { int gridId = ((Integer)obj).intValue(); if (gridId == 83814585) ok = false;  }  if (ok && this.m_GridProperties != null) this.m_PopupMenu.add(this.m_GridProperties).setComponentOrientation(m_Orientation);  }  } private void createEditMenu(ILbsGridComponent gridComp, JPopupMenu existingMenu) { if (isObjectGrid(gridComp)) { if (existingMenu != null) { this.m_PopupMenu = existingMenu; } else { this.m_PopupMenu = new JPopupMenu(); }  if (!fireCanAppendEvent(this.m_PopupMenu, 16)) return;  JMenu editSubMenu = new JMenu(m_Captions[48]); editSubMenu.applyComponentOrientation(m_Orientation); this.m_PopupMenu.applyComponentOrientation(m_Orientation); if (gridComp.gridHasOption(4096) && JLbsComponentHelper.canAddAppendMenuItem(gridComp)) appendAppendSubMenuItem(gridComp, editSubMenu);  if (gridComp.gridHasOption(1024) && JLbsComponentHelper.canAddInsertMenuItem(gridComp)) appendInsertSubMenuItem(gridComp, editSubMenu);  if (gridComp.gridHasOption(2048) && JLbsComponentHelper.canAddDeleteMenuItem(gridComp)) appendDeleteSubMenuItem(gridComp, editSubMenu);  if (editSubMenu.getItemCount() > 0) { if (this.m_PopupMenu.getComponentCount() > 0) this.m_PopupMenu.addSeparator();  this.m_PopupMenu.add(editSubMenu).setComponentOrientation(m_Orientation); }  }  } private void appendAppendSubMenuItem(ILbsGridComponent gridComp, JMenu editSubMenu) { if (hasPolicyLimit(this.m_OrjComp, 8192)) return;  if (!fireCanAppendEvent(this.m_PopupMenu, 100)) return;  BasicAction appendRowAction = new EditListGridAction(m_Captions[49], null, 0); appendRowAction.setSourceComponent(gridComp); editSubMenu.add(appendRowAction).setComponentOrientation(m_Orientation); } private void appendInsertSubMenuItem(ILbsGridComponent gridComp, JMenu editSubMenu) { if (hasPolicyLimit(this.m_OrjComp, 16384)) return;  if (!fireCanAppendEvent(this.m_PopupMenu, 101)) return;  BasicAction insertRowAction = new EditListGridAction(m_Captions[50], null, 1); insertRowAction.setSourceComponent(gridComp); editSubMenu.add(insertRowAction).setComponentOrientation(m_Orientation); } private void appendDeleteSubMenuItem(ILbsGridComponent gridComp, JMenu editSubMenu) { if (hasPolicyLimit(this.m_OrjComp, 32768)) return;  if (!fireCanAppendEvent(this.m_PopupMenu, 102)) return;  BasicAction deleteRowAction = new EditListGridAction(m_Captions[51], null, 2); deleteRowAction.setSourceComponent(gridComp); editSubMenu.add(deleteRowAction).setComponentOrientation(m_Orientation); } private void createSelectionOptionsMenu(ILbsGridComponent gridComp, JPopupMenu existingMenu) { if (isQuerySelectionGrid((ILbsComponentBase)gridComp) && isQueryMultiSelectionGrid((ILbsComponentBase)gridComp) && !hasPolicyLimit(this.m_OrjComp, 512)) { if (existingMenu != null) { this.m_PopupMenu = existingMenu; } else { this.m_PopupMenu = new JPopupMenu(); }  if (!fireCanAppendEvent(this.m_PopupMenu, 5)) return;  JMenu selectSubMenu = new JMenu(m_Captions[26]); selectSubMenu.applyComponentOrientation(m_Orientation); appendSubMenuItemSelectAll(gridComp, selectSubMenu); appendSubMenuItemDeselectAll(gridComp, selectSubMenu); appendSubMenuItemInvertSelection(gridComp, selectSubMenu); appendSubMenuItemSelectWithCount(gridComp, selectSubMenu); if (selectSubMenu.getItemCount() > 0) { if (this.m_PopupMenu.getComponentCount() > 0) this.m_PopupMenu.addSeparator();  this.m_PopupMenu.add(selectSubMenu).applyComponentOrientation(m_Orientation); }  }  } private void appendSubMenuItemSelectWithCount(ILbsGridComponent gridComp, JMenu selectSubMenu) { if (!fireCanAppendEvent(this.m_PopupMenu, 118)) return;  this.m_PopupSelectWithCountMenu = new SelectWithCountAction(m_Captions[29], null); this.m_PopupSelectWithCountMenu.setSourceComponent(gridComp); selectSubMenu.add(this.m_PopupSelectWithCountMenu).applyComponentOrientation(m_Orientation); } private void appendSubMenuItemInvertSelection(ILbsGridComponent gridComp, JMenu selectSubMenu) { if (!fireCanAppendEvent(this.m_PopupMenu, 117)) return;  this.m_PopUpInvertSelectionMenu = new InvertSelectionAction(m_Captions[20], null); this.m_PopUpInvertSelectionMenu.setSourceComponent(gridComp); selectSubMenu.add(this.m_PopUpInvertSelectionMenu).applyComponentOrientation(m_Orientation); } private void appendSubMenuItemDeselectAll(ILbsGridComponent gridComp, JMenu selectSubMenu) { if (!fireCanAppendEvent(this.m_PopupMenu, 116)) return;  this.m_PopUpDeselectAllMenu = new DeselectAllAction(m_Captions[19], null); this.m_PopUpDeselectAllMenu.setSourceComponent(gridComp); selectSubMenu.add(this.m_PopUpDeselectAllMenu).applyComponentOrientation(m_Orientation); } private void appendSubMenuItemSelectAll(ILbsGridComponent gridComp, JMenu selectSubMenu) { if (!fireCanAppendEvent(this.m_PopupMenu, 115)) return;  this.m_PopUpSelectAllMenu = new AllSelectAction(m_Captions[18], null); this.m_PopUpSelectAllMenu.setSourceComponent(gridComp); selectSubMenu.add(this.m_PopUpSelectAllMenu).applyComponentOrientation(m_Orientation); } private void createLockMenu(ILbsGridComponent gridComp, JPopupMenu existingMenu) { if (isQuerySelectionGrid((ILbsComponentBase)gridComp) && JLbsComponentHelper.isLockEnabled(gridComp, (JLbsPopupEventQueueFieldHolder.getInstance()).m_Context)) { if (existingMenu != null) { this.m_PopupMenu = existingMenu; } else { this.m_PopupMenu = new JPopupMenu(); }  if (!fireCanAppendEvent(this.m_PopupMenu, 9)) return;  if (this.m_PopupMenu.getComponentCount() > 0) this.m_PopupMenu.addSeparator();  this.m_PopupMenu.applyComponentOrientation(m_Orientation); boolean locked = JLbsComponentHelper.isLockedRecord(gridComp, (JLbsPopupEventQueueFieldHolder.getInstance()).m_Context); if (!locked) { this.m_LockAction = new LockAction(m_Captions[30], null, true); this.m_LockAction.setGridComponent(gridComp); this.m_PopupMenu.add(this.m_LockAction).setComponentOrientation(m_Orientation); } else { this.m_UnlockAction = new LockAction(m_Captions[31], null, false); this.m_UnlockAction.setGridComponent(gridComp); this.m_PopupMenu.add(this.m_UnlockAction).setComponentOrientation(m_Orientation); }  }  } private JPanel createDoSelectWithCount(ILbsGridComponent gridComp) { boolean left2Right = (m_Orientation == ComponentOrientation.LEFT_TO_RIGHT); JPanel mainPanel = new JPanel(); mainPanel.setBackground(Color.WHITE); mainPanel.setBorder(new EmptyBorder(0, 0, 0, 0)); mainPanel.setLayout(new BorderLayout()); JPanel dummypnl = new JPanel(); dummypnl.setBackground(Color.LIGHT_GRAY); dummypnl.setPreferredSize(new Dimension(24, 18)); mainPanel.add(dummypnl, left2Right ? "West" : "East"); JLabel lbl = new JLabel(m_Captions[29]); JPanel panelLbl = new JPanel(); panelLbl.setBorder(new EmptyBorder(0, 5, 0, 0)); panelLbl.setLayout(new BorderLayout()); panelLbl.add(lbl, "Center"); panelLbl.setBackground(Color.WHITE); mainPanel.add(panelLbl, "Center"); JLbsNumericEdit edit = new JLbsNumericEdit(); edit.setPreferredSize(new Dimension(40, 18)); edit.setTextLimit(3); edit.addKeyListener(new doSelectWithCountListener(gridComp, edit)); JPanel editPanel = new JPanel(); editPanel.setBackground(Color.WHITE); editPanel.setLayout(new FlowLayout(left2Right ? 0 : 2, 0, 0)); editPanel.setPreferredSize(new Dimension(66, 18)); editPanel.add((Component)edit); mainPanel.add(editPanel, left2Right ? "East" : "West"); mainPanel.applyComponentOrientation(m_Orientation); return mainPanel; } public class SelectWithCountAction extends BasicAction {
/*      */     private static final long serialVersionUID = 1L; public SelectWithCountAction(String text, Icon icon) { super(text, icon); } public void actionPerformed(ActionEvent e) { addActionToUsageUsedList(getClass().getName()); JLbsComponentHelper.doSelectWithCount(this.m_SourceComp, -1); }
/*      */   } class doSelectWithCountListener implements KeyListener { private final Object m_Comp; private final JLbsNumericEdit m_Source; public doSelectWithCountListener(Object comp, JLbsNumericEdit source) { this.m_Comp = comp; this.m_Source = source; } public void keyPressed(KeyEvent e) { int key = e.getKeyCode(); if (key == 10) { try { if (this.m_Source.getNumber().intValue() != 0) JLbsComponentHelper.doSelectWithCount(this.m_Comp, this.m_Source.getNumber().intValue());  } catch (ParseException e1) { e1.printStackTrace(); }  JLbsPopupEventQueue.this.m_PopupMenu.setVisible(false); }  } public void keyReleased(KeyEvent e) {} public void keyTyped(KeyEvent e) {} } private void createListReportMenu(ILbsGridComponent gridComp, JPopupMenu existingMenu) { if (isQueryGrid((ILbsComponentBase)gridComp) && !hasPolicyLimit(this.m_OrjComp, 256)) { if (existingMenu != null) { this.m_PopupMenu = existingMenu; } else { this.m_PopupMenu = new JPopupMenu(); }  if (!fireCanAppendEvent(this.m_PopupMenu, 5)) return;  if (this.m_PopupMenu.getComponentCount() > 0) this.m_PopupMenu.addSeparator();  this.m_PopupMenu.applyComponentOrientation(m_Orientation); JMenu reportingSubMenu = new JMenu(m_Captions[25]); reportingSubMenu.applyComponentOrientation(m_Orientation); this.m_RecordCountMenu = new ListReportAction(m_Captions[14], null); this.m_RecordCountMenu.setSourceComponent(gridComp); reportingSubMenu.add(this.m_RecordCountMenu).setComponentOrientation(m_Orientation); if (!fireCanAppendEvent(this.m_PopupMenu, 7)) { this.m_PopupMenu.add(reportingSubMenu).setComponentOrientation(m_Orientation); return; }  this.m_RecordCountMenu = new ListReportAction(m_Captions[15], null, true); this.m_RecordCountMenu.setSourceComponent(gridComp); reportingSubMenu.add(this.m_RecordCountMenu).setComponentOrientation(m_Orientation); this.m_PopupMenu.add(reportingSubMenu).setComponentOrientation(m_Orientation); }  } private void createRecordCountMenu(ILbsGridComponent gridComp, JPopupMenu existingMenu) { if (isQueryGrid((ILbsComponentBase)gridComp) || isObjectGrid(gridComp)) { if (existingMenu != null) { this.m_PopupMenu = existingMenu; } else { this.m_PopupMenu = new JPopupMenu(); }  if (!fireCanAppendEvent(this.m_PopupMenu, 0)) return;  if (this.m_PopupMenu.getComponentCount() > 0) this.m_PopupMenu.addSeparator();  this.m_PopupMenu.applyComponentOrientation(m_Orientation); this.m_RecordCountMenu = new RecordCountAction(m_Captions[13], null); this.m_RecordCountMenu.setSourceComponent(gridComp); this.m_PopupMenu.add(this.m_RecordCountMenu).setComponentOrientation(m_Orientation); }  } private void createSelectedRecordCountMenu(ILbsGridComponent gridComp, JPopupMenu existingMenu) { if (isQueryGrid((ILbsComponentBase)gridComp)) { if (existingMenu != null) { this.m_PopupMenu = existingMenu; } else { this.m_PopupMenu = new JPopupMenu(); }  if (!fireCanAppendEvent(this.m_PopupMenu, 20)) return;  if (this.m_PopupMenu.getComponentCount() > 0) this.m_PopupMenu.addSeparator();  this.m_PopupMenu.applyComponentOrientation(m_Orientation); this.m_SelectedRecordCountMenu = new SelectedRecordCountAction(m_Captions[59], null); this.m_SelectedRecordCountMenu.setSourceComponent(gridComp); this.m_PopupMenu.add(this.m_SelectedRecordCountMenu).setComponentOrientation(m_Orientation); }  } private void createRecordInfoMenu(ILbsComponentBase comp, JPopupMenu existingMenu) { if (comp instanceof com.lbs.controls.maskededit.JLbsMaskedEdit || comp instanceof com.lbs.controls.datedit.JLbsCalendarPanel || comp instanceof javax.swing.JCheckBox || comp instanceof JLabel || comp instanceof javax.swing.JButton || comp instanceof com.lbs.controls.JLbsComboEdit || comp instanceof com.lbs.controls.groupbox.JLbsMultiColGroupBox || comp instanceof com.lbs.controls.groupbox.JLbsGroupBox || comp instanceof com.lbs.controls.JLbsTabPage || comp instanceof com.lbs.controls.JLbsTabbedPane) return;  if (existingMenu != null) { this.m_PopupMenu = existingMenu; } else { this.m_PopupMenu = new JPopupMenu(); }  if (!fireCanAppendEvent(this.m_PopupMenu, 14)) return;  if (this.m_PopupMenu.getComponentCount() > 0) this.m_PopupMenu.addSeparator();  this.m_PopupMenu.applyComponentOrientation(m_Orientation); if (isQuerySelectionGrid(comp)) { this.m_RecordLog = new RecordInfoAction(m_Captions[42], null); this.m_RecordLog.setSourceComponent(comp); this.m_PopupMenu.add(this.m_RecordLog).setComponentOrientation(m_Orientation); }  } private void createSwitchPeriodMenu(Object source, JPopupMenu existingMenu) { if (JLbsConstants.PERIODLESS_CONTROLS && isGridQuery(this.m_OrjComp) && JLbsComponentHelper.canSwitchPeriod(source, (JLbsPopupEventQueueFieldHolder.getInstance()).m_Context, this.m_OrjComp)) { if (existingMenu != null) { this.m_PopupMenu = existingMenu; } else { this.m_PopupMenu = new JPopupMenu(); }  if (!fireCanAppendEvent(this.m_PopupMenu, 6)) return;  if (this.m_PopupMenu.getComponentCount() > 0) this.m_PopupMenu.addSeparator();  this.m_PopupMenu.applyComponentOrientation(m_Orientation); this.m_SwitchPeriod = new SwitchPeriodAction(m_Captions[17], null); this.m_SwitchPeriod.setSourceComponent(source); this.m_PopupMenu.add(this.m_SwitchPeriod).setComponentOrientation(m_Orientation); }  } private boolean isQueryGridMultiSelected(ILbsComponentBase component) { if (isGridQuery(component)) return JLbsComponentHelper.isQueryGridMultiSelected(component);  return false; } private boolean isSuperUser() { return JLbsComponentHelper.isSuperUser((JLbsPopupEventQueueFieldHolder.getInstance()).m_Context); } private boolean isGridQuery(ILbsComponentBase component) { return !(!isQueryGrid(component) && !isQueryTreeGrid(component)); } private boolean isGridColourfull(ILbsComponentBase component) { return !(!isQueryGrid(component) && !isTreeGrid(component) && !isEditGrid(component) && !isComponentTreeGrid(this.m_OrjComp) && !isComponentEditGrid(this.m_OrjComp)); } private boolean isQueryGrid(ILbsComponentBase component) { return JLbsComponentHelper.isQueryGrid(component); } private boolean isEditGrid(ILbsComponentBase component) { return JLbsComponentHelper.isEditGrid(component); } private boolean isFilterGrid(ILbsComponentBase component) { return JLbsComponentHelper.isFilterGrid(component); } private boolean isToggleAction(ILbsComponentBase component) { return JLbsComponentHelper.isToggleAction(component); } private boolean hasXUIPane(Object source) { return JLbsComponentHelper.hasXUIPane(source); } private boolean isObjectGrid(ILbsGridComponent component) { return JLbsComponentHelper.isObjectGrid(component); } private boolean isQueryTreeGrid(ILbsComponentBase component) { return JLbsComponentHelper.isQueryTreeGrid(component); } private boolean isTreeGrid(ILbsComponentBase component) { return JLbsComponentHelper.isTreeGrid(component); } private boolean isQuerySelectionGrid(ILbsComponentBase component) { return JLbsComponentHelper.isQuerySelectionGrid(component); } private boolean isQueryMultiSelectionGrid(ILbsComponentBase component) { return JLbsComponentHelper.isQueryMultiSelectionGrid(component); } private boolean fireCanAppendEvent(JPopupMenu menu, int itemType) { if (menu instanceof JLbsPopupMenu) { JLbsPopupMenu popMenu = (JLbsPopupMenu)menu; return popMenu.canAppendItem(itemType); }  return true; } public boolean createOpenWindowsPopupMenu(Object source, JPopupMenu existingMenu) { if (existingMenu != null) { this.m_PopupMenu = existingMenu; } else { this.m_PopupMenu = new JPopupMenu(); }  if (!fireCanAppendEvent(this.m_PopupMenu, 8)) return false;  if (!hasXUIPane(source)) return false;  if (source instanceof JDialog) if (((JDialog)source).isModal()) return false;   this.m_PopupMenu.applyComponentOrientation(m_Orientation); JMenu openWindowsSubMenu = new JMenu(m_Captions[27]); openWindowsSubMenu.applyComponentOrientation(m_Orientation); ArrayList<?> list = JLbsOpenWindowListing.getOpenDialogs(); if (list != null && list.size() > 0) { for (int i = 0; i < list.size(); i++) { Object o = list.get(i); if (o != source) { if (o instanceof JLbsDialog) openWindowsSubMenu.add(new ShowFormAction((JLbsDialog)o)).setComponentOrientation(m_Orientation);  if (o instanceof JLbsFrame) openWindowsSubMenu.add(new ShowFormAction((JLbsFrame)o)).setComponentOrientation(m_Orientation);  }  }  if (openWindowsSubMenu.getItemCount() > 0) { if (this.m_PopupMenu.getComponentCount() > 0) this.m_PopupMenu.addSeparator();  this.m_PopupMenu.add(openWindowsSubMenu).setComponentOrientation(m_Orientation); }  return true; }  return false; } public boolean createPreferencePopupMenu(Object source, JPopupMenu existingMenu) { int formUniqueID = -1; if (source instanceof JLbsDialog) { formUniqueID = ((JLbsDialog)source).getUIDWithMode(); } else if (source instanceof JLbsFrame) { formUniqueID = ((JLbsFrame)source).getUIDWithMode(); } else if (source instanceof JLbsInternalFrame) { formUniqueID = ((JLbsInternalFrame)source).getUIDWithMode(); }  if (formUniqueID != -1) { if (JLbsConstants.FORMPROPS_CAN_BE_RECORDED) if (hasFormProps(source)) { this.m_SavePreferences = new SavePreferences(m_Captions[11], null); this.m_SavePreferences.setSourceComponent(source); this.m_SaveGeneralPreferences = new SaveGeneralPreferences(m_Captions[12], null); this.m_SaveGeneralPreferences.setSourceComponent(source); this.m_SaveGeneralPreferencesForAll = new SaveGeneralPreferencesForAllFirms(m_Captions[58], null); this.m_SaveGeneralPreferencesForAll.setSourceComponent(source); }   if (isGridQuery(this.m_OrjComp)) { this.m_DBRefresh = new DBRefreshAction(m_Captions[16], null); this.m_DBRefresh.setSourceComponent(source); }  if (isGridColourfull(this.m_OrjComp)) if (getContent(source) != null) { this.m_RowColoring = new RowColoringAction(m_Captions[22], null); this.m_RowColoring.setSourceComponent(source); }   if (hasFormProps(source)) { this.m_ResetToDefaultValues = new RestoreLayoutAction(m_Captions[10], null); this.m_ResetToDefaultValues.setSourceComponent(source); }  if (existingMenu != null) { this.m_PopupMenu = existingMenu; } else { this.m_PopupMenu = new JPopupMenu(); }  if (!fireCanAppendEvent(this.m_PopupMenu, 2)) return false;  this.m_PopupMenu.applyComponentOrientation(m_Orientation); JMenu prefSubMenu = new JMenu(m_Captions[24]); prefSubMenu.applyComponentOrientation(m_Orientation); appendMenuItemDBRefresh(); appendSubMenuItemRowColoring(prefSubMenu); appendSubMenuItemResetToDefaults(source, prefSubMenu); appendSubMenuItemSavePrefs(source, prefSubMenu); if (prefSubMenu.getItemCount() > 0) { if (this.m_PopupMenu.getComponentCount() > 0) this.m_PopupMenu.addSeparator();  this.m_PopupMenu.add(prefSubMenu).setComponentOrientation(m_Orientation); }  return true; }  return false; } private void appendSubMenuItemSavePrefs(Object source, JMenu prefSubMenu) { if (!fireCanAppendEvent(this.m_PopupMenu, 114)) return;  if (JLbsConstants.FORMPROPS_CAN_BE_RECORDED) if (hasFormProps(source)) { prefSubMenu.add(this.m_SavePreferences).setComponentOrientation(m_Orientation); if (isSuperUser()) { prefSubMenu.add(this.m_SaveGeneralPreferences).setComponentOrientation(m_Orientation); prefSubMenu.add(this.m_SaveGeneralPreferencesForAll).setComponentOrientation(m_Orientation); }  }   } private void appendSubMenuItemResetToDefaults(Object source, JMenu prefSubMenu) { if (!fireCanAppendEvent(this.m_PopupMenu, 113)) return;  if (this.m_ResetToDefaultValues != null && hasFormProps(source)) prefSubMenu.add(this.m_ResetToDefaultValues).setComponentOrientation(m_Orientation);  } private void appendSubMenuItemRowColoring(JMenu prefSubMenu) { if (hasPolicyLimit(this.m_OrjComp, 4096)) return;  if (!fireCanAppendEvent(this.m_PopupMenu, 112)) return;  if (isGridColourfull(this.m_OrjComp)) if (this.m_RowColoring != null) prefSubMenu.add(this.m_RowColoring).setComponentOrientation(m_Orientation);   } private void appendMenuItemDBRefresh() { if (!fireCanAppendEvent(this.m_PopupMenu, 111)) return;  if (isGridQuery(this.m_OrjComp)) this.m_PopupMenu.add(this.m_DBRefresh).setComponentOrientation(m_Orientation);  } private boolean isComponentTreeGrid(ILbsComponentBase component) { boolean result = false; if (component instanceof ILbsInplaceEditorBase) { ILbsInplaceEditorBase base = (ILbsInplaceEditorBase)component; return (base.getOwnerGrid() != null && isTreeGrid((ILbsComponentBase)base.getOwnerGrid())); }  return result; } private boolean isComponentEditGrid(ILbsComponentBase component) { boolean result = false; if (component instanceof ILbsInplaceEditorBase) { ILbsInplaceEditorBase base = (ILbsInplaceEditorBase)component; return (base.getOwnerGrid() != null && isEditGrid((ILbsComponentBase)base.getOwnerGrid())); }  return result; } private Object getContent(Object source) { Object content = null; if (source instanceof JLbsFrame) { content = ((JLbsFrame)source).getFormProp("Content"); } else if (source instanceof JLbsDialog) { content = ((JLbsDialog)source).getFormProp("Content"); } else if (source instanceof JLbsInternalFrame) { content = ((JLbsInternalFrame)source).getFormProp("Content"); }  return content; } private boolean hasFormProps(Object source) { Object formProps = null; if (source instanceof JLbsFrame) { formProps = ((JLbsFrame)source).getFormProps(); } else if (source instanceof JLbsDialog) { formProps = ((JLbsDialog)source).getFormProps(); } else if (source instanceof JLbsInternalFrame) { formProps = ((JLbsInternalFrame)source).getFormProps(); }  if (formProps != null) return true;  return false; } public boolean createTemplatePopupMenu(Object source) { return createTemplatePopupMenu(source, null); } public boolean createTemplatePopupMenu(Object source, JPopupMenu existingMenu) { if (ms_ApplicationId == ApplicationIdEnum.Admin && JLbsConstants.checkAppCloud()) return false;  if (this.m_XUITemplateManager != null) { int formUniqueID = -1; if (source instanceof JLbsDialog) { formUniqueID = ((JLbsDialog)source).getUIDWithMode(); } else if (source instanceof JLbsFrame) { formUniqueID = ((JLbsFrame)source).getUIDWithMode(); } else if (source instanceof JLbsInternalFrame) { formUniqueID = ((JLbsInternalFrame)source).getUIDWithMode(); }  if (formUniqueID != -1 && JLbsComponentHelper.canAppendTemplateMenu()) { TemplateAction startAction = null, finishAction = null, loadAction = null; startAction = new TemplateAction(m_Captions[7], 1, formUniqueID, source); finishAction = new TemplateAction(m_Captions[8], 2, formUniqueID, source); loadAction = new TemplateAction(m_Captions[9], 3, formUniqueID, source); JLbsPopupMenu lbsPopup = null; if (existingMenu != null) { if (existingMenu instanceof JLbsPopupMenu) lbsPopup = (JLbsPopupMenu)existingMenu;  this.m_PopupMenu = existingMenu; } else { this.m_PopupMenu = new JPopupMenu(); }  if (!fireCanAppendEvent(this.m_PopupMenu, 4)) return false;  if (this.m_PopupMenu.getComponentCount() > 0) this.m_PopupMenu.addSeparator();  this.m_PopupMenu.applyComponentOrientation(m_Orientation); JMenu templateSubMenu = new JMenu(m_Captions[23]); templateSubMenu.applyComponentOrientation(m_Orientation); appendStartAction(startAction, lbsPopup, templateSubMenu); appendFinishAction(finishAction, lbsPopup, templateSubMenu); appendLoadAction(loadAction, lbsPopup, templateSubMenu); if (templateSubMenu.getItemCount() > 0) { this.m_PopupMenu.add(templateSubMenu).setComponentOrientation(m_Orientation); return true; }  }  }  return false; } private void appendLoadAction(TemplateAction loadAction, JLbsPopupMenu lbsPopup, JMenu templateSubMenu) { if (lbsPopup != null && hasPolicyLimit((ILbsComponentBase)lbsPopup, 262144)) return;  templateSubMenu.add(loadAction).setComponentOrientation(m_Orientation); } private void appendFinishAction(TemplateAction finishAction, JLbsPopupMenu lbsPopup, JMenu templateSubMenu) { if (lbsPopup != null && hasPolicyLimit((ILbsComponentBase)lbsPopup, 131072)) return;  templateSubMenu.add(finishAction).setComponentOrientation(m_Orientation); } private void appendStartAction(TemplateAction startAction, JLbsPopupMenu lbsPopup, JMenu templateSubMenu) { if (lbsPopup != null && hasPolicyLimit((ILbsComponentBase)lbsPopup, 65536)) return;  templateSubMenu.add(startAction).setComponentOrientation(m_Orientation); } public void showPopup(Component parent, MouseEvent me) { if (this.m_PopupMenu != null) { this.m_PopupMenu.validate(); this.m_PopupMenu.show(parent, me.getX(), me.getY()); }  } private boolean containsPoint(Component c, int x, int y) { if (x >= c.getX() && x <= c.getX() + c.getWidth() && y >= c.getY() && y <= c.getY() + c.getHeight()) return true;  return false; } private JLbsInternalFrame searchForDesktopForm(Container source, int x, int y) { byte b; int i; Component[] arrayOfComponent; for (i = (arrayOfComponent = source.getComponents()).length, b = 0; b < i; ) { Component c = arrayOfComponent[b]; if (c instanceof JLbsInternalFrame) { if (((JLbsInternalFrame)c).isSelected() && containsPoint(c, x, y)) return (JLbsInternalFrame)c;  } else if (c instanceof Container) { JLbsInternalFrame frame = searchForDesktopForm((Container)c, x, y); if (frame != null) if (frame.isSelected() && containsPoint((Component)frame, x, y)) return frame;   }  b++; }  return null; } protected void dispatchEvent(AWTEvent evt) { try { boolean consumed = false; if (this.m_ShortCutMask != 2 && evt instanceof KeyEvent) { KeyEvent kEvent = (KeyEvent)evt; Object object = kEvent.getSource(); if (object instanceof ILbsComponentBase && kEvent.isMetaDown()) kEvent.setModifiers(kEvent.getModifiers() | 0x2);  }  if (evt instanceof KeyEvent && ((KeyEvent)evt).getKeyCode() == 154) { JLbsComponentHelper.processKeyEvent((KeyEvent)evt); consumed = ((KeyEvent)evt).isConsumed(); }  if (JLbsConstants.DESKTOP_MODE && evt instanceof KeyEvent) { KeyEvent keyEvent = (KeyEvent)evt; if (keyEvent.isControlDown() && keyEvent.getKeyCode() == 9) { JLbsComponentHelper.processKeyEvent(keyEvent); consumed = ((KeyEvent)evt).isConsumed(); }  if (keyEvent.getID() == 402 && keyEvent.getKeyCode() == 17) JLbsComponentHelper.processKeyEvent(keyEvent);  }  if (!consumed) super.dispatchEvent(evt);  if (!consumed && evt instanceof KeyEvent) { if (((KeyEvent)evt).getModifiers() != 0) JLbsComponentHelper.ensurePopupMenuExist(evt.getSource());  JLbsComponentHelper.processKeyEvent((KeyEvent)evt); }  if (!(evt instanceof MouseEvent)) return;  MouseEvent me = (MouseEvent)evt; if (!me.isPopupTrigger()) return;  if ((MenuSelectionManager.defaultManager().getSelectedPath()).length > 0) return;  Component comp = SwingUtilities.getDeepestComponentAt((Component)me.getSource(), me.getX(), me.getY()); if (this.m_OrjComp == null && comp instanceof ILbsComponentBase) this.m_OrjComp = (ILbsComponentBase)comp;  Object source = me.getSource(); boolean sourceInternalFrame = false; if (source instanceof Component && !(source instanceof JLbsDialog) && !(source instanceof JLbsFrame)) if (JLbsConstants.DESKTOP_MODE && source instanceof Container) { JLbsInternalFrame frame = searchForDesktopForm((Container)source, me.getX(), me.getY()); if (frame != null) { source = frame; sourceInternalFrame = true; } else { source = SwingUtilities.getRoot((Component)source); }  } else { source = SwingUtilities.getRoot((Component)source); }   if (comp.getClass().getName().startsWith("y.view.Graph2DView")) return;  boolean menuCreated = createTemplatePopupMenu(source); menuCreated |= createPreferencePopupMenu(source, menuCreated ? this.m_PopupMenu : null); menuCreated |= createOpenWindowsPopupMenu(source, menuCreated ? this.m_PopupMenu : null); menuCreated |= createShortcutDefinitionsPopupMenu(source, menuCreated ? this.m_PopupMenu : null); menuCreated |= createBookmarkURLPopupMenu(source, menuCreated ? this.m_PopupMenu : null); boolean hasGrid = false; if (comp instanceof ILbsComponentBase) { if (JLbsComponentHelper.isTreeGrid((ILbsComponentBase)comp)) { ILbsGridComponent gridComp = (ILbsGridComponent)comp; createExpandCollapse(gridComp, menuCreated ? this.m_PopupMenu : null); hasGrid = true; }  if (isFilterGrid((ILbsComponentBase)comp)) { ILbsGridComponent gridComp = (ILbsGridComponent)comp; createFilterProps(gridComp, menuCreated ? this.m_PopupMenu : null); }  if (isToggleAction((ILbsComponentBase)comp)) { ILbsGridComponent gridComp = (ILbsGridComponent)comp; createSelectDeselect(gridComp, menuCreated ? this.m_PopupMenu : null); }  }  if (comp instanceof JTextComponent) { createPopupMenu((JTextComponent)comp, menuCreated ? this.m_PopupMenu : null); } else if (comp instanceof ILbsGridComponent) { if (JLbsComponentHelper.canCustomizeColumns((ILbsComponentBase)comp)) createPopupMenu((ILbsGridComponent)comp, menuCreated ? this.m_PopupMenu : null);  hasGrid = true; } else { prepareSwingPopupMenu(comp); }  if (!hasGrid && comp instanceof ILbsComponentBase) createRecordInfoMenu((ILbsComponentBase)comp, menuCreated ? this.m_PopupMenu : null);  if (JLbsConstants.DESKTOP_MODE && sourceInternalFrame) { if (this.m_PopupMenu != null) { Point p = ((Component)source).getLocationOnScreen(); if (source != null && p != null && me.getX() - p.x >= 0 && me.getY() - p.y >= 0) { this.m_PopupMenu.validate(); this.m_PopupMenu.show((Component)source, me.getX() - p.x, me.getY() - p.y); } else { showPopup((Component)me.getSource(), me); }  }  } else { showPopup((Component)me.getSource(), me); }  } catch (Exception e) { if (JLbsConstants.DEBUG) e.printStackTrace();  if (evt instanceof MouseEvent) ((MouseEvent)evt).consume();  }  } private void prepareSwingPopupMenu(Component component) { if (component instanceof JPanel && ((JPanel)component).getComponentPopupMenu() != null) { createSwingPopupMenu((JPanel)component); return; }  Container parent = null; while ((parent = component.getParent()) != null) { boolean control = (parent instanceof JPanel && ((JPanel)parent).getComponentPopupMenu() != null); if (control) { createSwingPopupMenu((JPanel)parent); return; }  component = parent; }  } private void createSwingPopupMenu(JPanel panel) { this.m_PopupMenu.removeAll(); if (panel.getComponentPopupMenu() != null) this.m_PopupMenu = panel.getComponentPopupMenu();  } public abstract class BasicAction extends AbstractAction {
/*      */     private static final long serialVersionUID = 1L; protected JTextComponent m_Component; protected ILbsGridComponent m_GridComponent; protected Object m_SourceComp; public BasicAction(String text, Icon icon) { super(text, icon); putValue("ShortDescription", text); } public void setTextComponent(JTextComponent comp) { this.m_Component = comp; } public void setGridComponent(ILbsGridComponent comp) { this.m_GridComponent = comp; } public void setSourceComponent(Object comp) { this.m_SourceComp = comp; } protected void addActionToUsageUsedList(String keyStr) { if (JLbsPopupEventQueue.this.m_PopupMenu != null && JLbsPopupEventQueue.this.m_PopupMenu instanceof JLbsPopupMenu) if (this.m_SourceComp != null) { JLbsComponentHelper.setPopupItemUsagesStr(this.m_SourceComp, keyStr, 1); } else if (this.m_GridComponent != null) { JLbsComponentHelper.setPopupItemUsagesStr(this.m_GridComponent, keyStr, 1); } else if (this.m_Component != null) { JLbsComponentHelper.setPopupItemUsagesStr(this.m_Component, keyStr, 1); }   } public abstract void actionPerformed(ActionEvent param1ActionEvent);
/* 3227 */   } public class ShowFormAction extends BasicAction { private static final long serialVersionUID = 1L; public ShowFormAction(JLbsDialog dialog) { this(String.valueOf(dialog.getTitle()) + (dialog.isActive() ? (" (" + JLbsPopupEventQueue.m_Captions[28] + ")") : ""), (Icon)null); setSourceComponent(dialog); } public ShowFormAction(JLbsFrame frame) { this(String.valueOf(frame.getTitle()) + (frame.isActive() ? (" (" + JLbsPopupEventQueue.m_Captions[28] + ")") : ""), (Icon)null); setSourceComponent(frame); } public ShowFormAction(String text, Icon icon) { super(text, icon); } public void actionPerformed(ActionEvent e) { addActionToUsageUsedList(getClass().getName()); if (this.m_SourceComp instanceof JLbsDialog) ((JLbsDialog)this.m_SourceComp).setVisible(true);  if (this.m_SourceComp instanceof JLbsFrame) ((JLbsFrame)this.m_SourceComp).setVisible(true);  } } public class CutAction extends BasicAction { private static final long serialVersionUID = 1L; public CutAction(String text, Icon icon) { super(text, icon); putValue("AcceleratorKey", KeyStroke.getKeyStroke("ctrl X")); } public void actionPerformed(ActionEvent e) { this.m_Component.cut(); } public boolean isEnabled() { return (this.m_Component != null && this.m_Component.isEditable() && this.m_Component.getSelectedText() != null); } } public class CopyAction extends BasicAction { private static final long serialVersionUID = 1L; public CopyAction(String text, Icon icon) { super(text, icon); putValue("AcceleratorKey", KeyStroke.getKeyStroke("ctrl C")); } public void actionPerformed(ActionEvent e) { this.m_Component.copy(); } public boolean isEnabled() { return (this.m_Component != null && this.m_Component.getSelectedText() != null); } } public class PasteAction extends BasicAction { private static final long serialVersionUID = 1L; public PasteAction(String text, Icon icon) { super(text, icon); putValue("AcceleratorKey", KeyStroke.getKeyStroke("ctrl V")); } public void actionPerformed(ActionEvent e) { this.m_Component.paste(); } public boolean isEnabled() { Transferable content = Toolkit.getDefaultToolkit().getSystemClipboard().getContents(null); return (this.m_Component != null && this.m_Component.isEnabled() && this.m_Component.isEditable() && content.isDataFlavorSupported(DataFlavor.stringFlavor)); } } public class SelectAllAction extends BasicAction { private static final long serialVersionUID = 1L; public SelectAllAction(String text, Icon icon) { super(text, icon); putValue("AcceleratorKey", KeyStroke.getKeyStroke("ctrl A")); } public void actionPerformed(ActionEvent e) { addActionToUsageUsedList(getClass().getName()); this.m_Component.selectAll(); } public boolean isEnabled() { return (this.m_Component != null && this.m_Component.isEnabled() && this.m_Component.getText().length() > 0 && (this.m_Component.getSelectedText() == null || this.m_Component.getSelectedText().length() < this.m_Component.getText().length())); } } public class InspectAsPivot extends BasicAction { private static final long serialVersionUID = 1L; private boolean allRows = false; public InspectAsPivot(String text, Icon icon, boolean allRows) { super(text, icon); this.allRows = allRows; putValue("AcceleratorKey", null); } public void actionPerformed(ActionEvent e) { addActionToUsageUsedList(getClass().getName()); JLbsComponentHelper.createPivotTableTab((JLbsPopupEventQueue.JLbsPopupEventQueueFieldHolder.getInstance()).m_Context, JLbsPopupEventQueue.this.m_OrjComp, this.allRows); } } public class ViewTableReport extends BasicAction { private static final long serialVersionUID = 1L; public ViewTableReport(String text, Icon icon) { super(text, icon); putValue("AcceleratorKey", null); } public void actionPerformed(ActionEvent e) { addActionToUsageUsedList(getClass().getName()); TableReportInfo tableReportInfo = JLbsComponentHelper.createTableReportInfo((JLbsPopupEventQueue.JLbsPopupEventQueueFieldHolder.getInstance()).m_Context, JLbsPopupEventQueue.this.m_OrjComp); TableReportDlg tableReportDlg = new TableReportDlg(tableReportInfo); tableReportDlg.centerScreen(); tableReportDlg.setVisible(true); } } public class HideSelectedColumn extends BasicAction { private static final long serialVersionUID = 1L; public HideSelectedColumn(String text, Icon icon) { super(text, icon); putValue("AcceleratorKey", null); } public void actionPerformed(ActionEvent e) { addActionToUsageUsedList(getClass().getName()); this.m_GridComponent.hideSelectedColumn(); } } public class ShowAllColumns extends BasicAction { private static final long serialVersionUID = 1L; public ShowAllColumns(String text, Icon icon) { super(text, icon); putValue("AcceleratorKey", null); } public void actionPerformed(ActionEvent e) { addActionToUsageUsedList(getClass().getName()); this.m_GridComponent.showAllColumns(); } } public class GridProperties extends BasicAction { private static final long serialVersionUID = 1L; public GridProperties(String text, Icon icon) { super(text, icon); putValue("AcceleratorKey", null); } public void actionPerformed(ActionEvent e) { addActionToUsageUsedList(getClass().getName()); JLbsComponentHelper.doGridOperations(this.m_GridComponent, (JLbsPopupEventQueue.JLbsPopupEventQueueFieldHolder.getInstance()).m_Context); } } public class FilterGridProperties extends BasicAction { private static final long serialVersionUID = 1L; public FilterGridProperties(String text, Icon icon) { super(text, icon); putValue("AcceleratorKey", null); } public void actionPerformed(ActionEvent e) { addActionToUsageUsedList(getClass().getName()); JLbsComponentHelper.doFilterGridOperations(this.m_GridComponent, (JLbsPopupEventQueue.JLbsPopupEventQueueFieldHolder.getInstance()).m_Context); } } public class SelectAllRowAction extends BasicAction { private static final long serialVersionUID = 1L; public SelectAllRowAction(String text, Icon icon) { super(text, icon); putValue("AcceleratorKey", KeyStroke.getKeyStroke("ctrl space")); } public void actionPerformed(ActionEvent e) { addActionToUsageUsedList(getClass().getName()); JLbsComponentHelper.doToggleAction(this.m_SourceComp, (JLbsPopupEventQueue.JLbsPopupEventQueueFieldHolder.getInstance()).m_Context); } public boolean isEnabled() { return true; } } public class DeselectAllRowAction extends BasicAction { private static final long serialVersionUID = 1L; public DeselectAllRowAction(String text, Icon icon) { super(text, icon); putValue("AcceleratorKey", KeyStroke.getKeyStroke("delete")); } public void actionPerformed(ActionEvent e) { addActionToUsageUsedList(getClass().getName()); JLbsComponentHelper.doDeselectToggleAction(this.m_SourceComp, (JLbsPopupEventQueue.JLbsPopupEventQueueFieldHolder.getInstance()).m_Context); } public boolean isEnabled() { return true; } } public class RestoreLayoutAction extends BasicAction { private static final long serialVersionUID = 1L; public RestoreLayoutAction(String text, Icon icon) { super(text, icon); putValue("AcceleratorKey", null); } public void actionPerformed(ActionEvent e) { addActionToUsageUsedList(getClass().getName()); JLbsComponentHelper.clearPreferences(this.m_SourceComp, (JLbsPopupEventQueue.JLbsPopupEventQueueFieldHolder.getInstance()).m_Context); } } public class SavePreferences extends BasicAction { private static final long serialVersionUID = 1L; public SavePreferences(String text, Icon icon) { super(text, icon); putValue("AcceleratorKey", null); } public void actionPerformed(ActionEvent e) { addActionToUsageUsedList(getClass().getName()); JLbsComponentHelper.savePreferences(this.m_SourceComp, (JLbsPopupEventQueue.JLbsPopupEventQueueFieldHolder.getInstance()).m_Context); } } public class SaveGeneralPreferences extends BasicAction { private static final long serialVersionUID = 1L; public SaveGeneralPreferences(String text, Icon icon) { super(text, icon); putValue("AcceleratorKey", null); } public void actionPerformed(ActionEvent e) { addActionToUsageUsedList(getClass().getName()); JLbsComponentHelper.saveGeneralPreferences(this.m_SourceComp, (JLbsPopupEventQueue.JLbsPopupEventQueueFieldHolder.getInstance()).m_Context); } } public class SaveGeneralPreferencesForAllFirms extends BasicAction { private static final long serialVersionUID = 1L; public SaveGeneralPreferencesForAllFirms(String text, Icon icon) { super(text, icon); putValue("AcceleratorKey", null); } public void actionPerformed(ActionEvent e) { addActionToUsageUsedList(getClass().getName()); JLbsComponentHelper.saveGeneralPreferencesForAllFirms(this.m_SourceComp, (JLbsPopupEventQueue.JLbsPopupEventQueueFieldHolder.getInstance()).m_Context); } } public class ExpandCollapseAction extends BasicAction { private static final long serialVersionUID = 1L; private final boolean expander; public ExpandCollapseAction(String text, Icon icon, boolean expander) { super(text, icon); this.expander = expander; putValue("AcceleratorKey", null); } public void actionPerformed(ActionEvent e) { addActionToUsageUsedList(getClass().getName()); if (this.expander) { JLbsComponentHelper.treeGridExpand((ILbsGridComponent)this.m_SourceComp); } else { JLbsComponentHelper.treeGridCollapse((ILbsGridComponent)this.m_SourceComp); }  } } public class RecordCountAction extends BasicAction { private static final long serialVersionUID = 1L; public RecordCountAction(String text, Icon icon) { super(text, icon); putValue("AcceleratorKey", null); } public void actionPerformed(ActionEvent e) { addActionToUsageUsedList(getClass().getName()); JLbsComponentHelper.showRecordCount(this.m_SourceComp, (JLbsPopupEventQueue.JLbsPopupEventQueueFieldHolder.getInstance()).m_Context); } } public class SelectedRecordCountAction extends BasicAction { private static final long serialVersionUID = 1L; public SelectedRecordCountAction(String text, Icon icon) { super(text, icon); putValue("AcceleratorKey", null); } public void actionPerformed(ActionEvent e) { addActionToUsageUsedList(getClass().getName()); JLbsComponentHelper.showSelectedRecordCount(this.m_SourceComp, (JLbsPopupEventQueue.JLbsPopupEventQueueFieldHolder.getInstance()).m_Context); } } public class RecordInfoAction extends BasicAction { private static final long serialVersionUID = 1L; public RecordInfoAction(String text, Icon icon) { super(text, icon); putValue("AcceleratorKey", null); } public void actionPerformed(ActionEvent e) { addActionToUsageUsedList(getClass().getName()); JLbsComponentHelper.showRecordInfo(this.m_SourceComp, (JLbsPopupEventQueue.JLbsPopupEventQueueFieldHolder.getInstance()).m_Context); } } public class AllSelectAction extends BasicAction { private static final long serialVersionUID = 1L; public AllSelectAction(String text, Icon icon) { super(text, icon); putValue("AcceleratorKey", KeyStroke.getKeyStroke("ctrl A")); } public void actionPerformed(ActionEvent e) { addActionToUsageUsedList(getClass().getName()); JLbsComponentHelper.doSelectAll(this.m_SourceComp); if (JLbsPopupEventQueue.this.m_PopupMenu instanceof JLbsPopupMenu && this.m_SourceComp instanceof ILbsComponentBase) recordPopUpSelectAll();  } private void recordPopUpSelectAll() { StringBuilder buffer = new StringBuilder(); buffer.append("POP_UP_SELECT_ALL"); buffer.append("|"); buffer.append(JLbsComponentHelper.getTag((ILbsComponentBase)this.m_SourceComp)); buffer.append("|"); buffer.append(-1); buffer.append("|"); buffer.append(-1); JLbsEventRecorderHelper.addRecordItem((ILbsComponentBase)JLbsPopupEventQueue.this.m_PopupMenu, buffer.toString()); } } public class DeselectAllAction extends BasicAction { private static final long serialVersionUID = 1L; public DeselectAllAction(String text, Icon icon) { super(text, icon); putValue("AcceleratorKey", KeyStroke.getKeyStroke("shift ctrl A")); } public void actionPerformed(ActionEvent e) { addActionToUsageUsedList(getClass().getName()); JLbsComponentHelper.doDeselectAll(this.m_SourceComp); if (JLbsPopupEventQueue.this.m_PopupMenu instanceof JLbsPopupMenu && this.m_SourceComp instanceof ILbsComponentBase) recordPopUpDeselectAll();  } private void recordPopUpDeselectAll() { StringBuilder buffer = new StringBuilder(); buffer.append("POP_UP_DESELECT_ALL"); buffer.append("|"); buffer.append(JLbsComponentHelper.getTag((ILbsComponentBase)this.m_SourceComp)); buffer.append("|"); buffer.append(-1); buffer.append("|"); buffer.append(-1); JLbsEventRecorderHelper.addRecordItem((ILbsComponentBase)JLbsPopupEventQueue.this.m_PopupMenu, buffer.toString()); } } public class InvertSelectionAction extends BasicAction { private static final long serialVersionUID = 1L; public InvertSelectionAction(String text, Icon icon) { super(text, icon); putValue("AcceleratorKey", KeyStroke.getKeyStroke("ctrl I")); } public void actionPerformed(ActionEvent e) { addActionToUsageUsedList(getClass().getName()); JLbsComponentHelper.doInvertSelection(this.m_SourceComp); if (JLbsPopupEventQueue.this.m_PopupMenu instanceof JLbsPopupMenu && this.m_SourceComp instanceof ILbsComponentBase) recordPopUpInvertSelection();  } private void recordPopUpInvertSelection() { StringBuilder buffer = new StringBuilder(); buffer.append("POP_UP_INVERT_SELECTION"); buffer.append("|"); buffer.append(JLbsComponentHelper.getTag((ILbsComponentBase)this.m_SourceComp)); buffer.append("|"); buffer.append(-1); buffer.append("|"); buffer.append(-1); JLbsEventRecorderHelper.addRecordItem((ILbsComponentBase)JLbsPopupEventQueue.this.m_PopupMenu, buffer.toString()); } } public class DBRefreshAction extends BasicAction { private static final long serialVersionUID = 1L; public DBRefreshAction(String text, Icon icon) { super(text, icon); putValue("AcceleratorKey", null); } public void actionPerformed(ActionEvent e) { addActionToUsageUsedList(getClass().getName()); JLbsComponentHelper.dbRefresh(this.m_SourceComp, (JLbsPopupEventQueue.JLbsPopupEventQueueFieldHolder.getInstance()).m_Context, JLbsPopupEventQueue.this.m_OrjComp); } } public class RowColoringAction extends BasicAction { private static final long serialVersionUID = 1L; public RowColoringAction(String text, Icon icon) { super(text, icon); putValue("AcceleratorKey", null); } public void actionPerformed(ActionEvent e) { addActionToUsageUsedList(getClass().getName()); JLbsComponentHelper.rowColoring(this.m_SourceComp, (JLbsPopupEventQueue.JLbsPopupEventQueueFieldHolder.getInstance()).m_Context, JLbsPopupEventQueue.this.m_OrjComp); } } public class EditListGridAction extends BasicAction { private static final long serialVersionUID = 1L; private int m_ActionType = 0; public EditListGridAction(String text, Icon icon, int actionType) { super(text, icon); putValue("AcceleratorKey", null); this.m_ActionType = actionType; } public void actionPerformed(ActionEvent e) { addActionToUsageUsedList(getClass().getName()); switch (this.m_ActionType) { case 0: JLbsComponentHelper.insertRowToListGrid(this.m_SourceComp, (JLbsPopupEventQueue.JLbsPopupEventQueueFieldHolder.getInstance()).m_Context); break;case 1: JLbsComponentHelper.appendRowToListGrid(this.m_SourceComp, (JLbsPopupEventQueue.JLbsPopupEventQueueFieldHolder.getInstance()).m_Context); break;case 2: JLbsComponentHelper.deleteRowToListGrid(this.m_SourceComp, (JLbsPopupEventQueue.JLbsPopupEventQueueFieldHolder.getInstance()).m_Context); break; }  } } public class ListReportAction extends BasicAction { private static final long serialVersionUID = 1L; private boolean m_Grouped = false; public ListReportAction(String text, Icon icon) { super(text, icon); putValue("AcceleratorKey", null); } public ListReportAction(String text, Icon icon, boolean grouped) { super(text, icon); putValue("AcceleratorKey", null); this.m_Grouped = grouped; } public void actionPerformed(ActionEvent e) { addActionToUsageUsedList(getClass().getName()); if (!this.m_Grouped) { JLbsComponentHelper.showListReport(this.m_SourceComp, (JLbsPopupEventQueue.JLbsPopupEventQueueFieldHolder.getInstance()).m_Context); } else { JLbsComponentHelper.showGroupedListReport(this.m_SourceComp, (JLbsPopupEventQueue.JLbsPopupEventQueueFieldHolder.getInstance()).m_Context); }  } } public class LockAction extends BasicAction { private static final long serialVersionUID = 1L; private boolean m_Lock = false; public LockAction(String text, Icon icon, boolean lock) { super(text, icon); putValue("AcceleratorKey", null); this.m_Lock = lock; } public void actionPerformed(ActionEvent e) { addActionToUsageUsedList(getClass().getName()); if (this.m_Lock) { JLbsComponentHelper.lockRecord(this.m_GridComponent, (JLbsPopupEventQueue.JLbsPopupEventQueueFieldHolder.getInstance()).m_Context); } else { JLbsComponentHelper.unlockRecord(this.m_GridComponent, (JLbsPopupEventQueue.JLbsPopupEventQueueFieldHolder.getInstance()).m_Context); }  } } public class ShortcutDefinition extends BasicAction { private static final long serialVersionUID = 1L; public ShortcutDefinition(String text, Icon icon) { super(text, icon); putValue("AcceleratorKey", null); } public void actionPerformed(ActionEvent e) { addActionToUsageUsedList(getClass().getName()); JLbsComponentHelper.defineShortcut(this.m_SourceComp, (JLbsPopupEventQueue.JLbsPopupEventQueueFieldHolder.getInstance()).m_Context); } } public class RevisionHistory extends BasicAction { private static final long serialVersionUID = 1L; public RevisionHistory(String text, Icon icon) { super(text, icon); putValue("AcceleratorKey", null); } public void actionPerformed(ActionEvent e) { addActionToUsageUsedList(getClass().getName()); JLbsComponentHelper.revisionHistory(this.m_SourceComp, (JLbsPopupEventQueue.JLbsPopupEventQueueFieldHolder.getInstance()).m_Context); } } public class WorkflowStatusAction extends BasicAction { private static final long serialVersionUID = 1L; public WorkflowStatusAction(String text, Icon icon) { super(text, icon); putValue("AcceleratorKey", null); } public void actionPerformed(ActionEvent e) { addActionToUsageUsedList(getClass().getName()); JLbsComponentHelper.showWorkflowStatus(this.m_SourceComp, (JLbsPopupEventQueue.JLbsPopupEventQueueFieldHolder.getInstance()).m_Context); } } public class BookmarkURLDefinition extends BasicAction { private static final long serialVersionUID = 1L; public BookmarkURLDefinition(String text, Icon icon) { super(text, icon); putValue("AcceleratorKey", null); } public void actionPerformed(ActionEvent e) { addActionToUsageUsedList(getClass().getName()); JLbsComponentHelper.createBookmarkURL(this.m_SourceComp, (JLbsPopupEventQueue.JLbsPopupEventQueueFieldHolder.getInstance()).m_Context); } } public class ExportDefinition extends BasicAction { private static final long serialVersionUID = 1L; public ExportDefinition(String text, Icon icon) { super(text, icon); putValue("AcceleratorKey", null); } public void actionPerformed(ActionEvent e) { addActionToUsageUsedList(getClass().getName()); JLbsComponentHelper.openExportWizard(this.m_SourceComp, (JLbsPopupEventQueue.JLbsPopupEventQueueFieldHolder.getInstance()).m_Context); } } public class ImportDefinition extends BasicAction { private static final long serialVersionUID = 1L; public ImportDefinition(String text, Icon icon) { super(text, icon); putValue("AcceleratorKey", null); } public void actionPerformed(ActionEvent e) { addActionToUsageUsedList(getClass().getName()); JLbsComponentHelper.openImportWizard(this.m_SourceComp, (JLbsPopupEventQueue.JLbsPopupEventQueueFieldHolder.getInstance()).m_Context); } } public class ExportBrwToExcelDefinition extends BasicAction { private static final long serialVersionUID = 1L; public ExportBrwToExcelDefinition(String text, Icon icon) { super(text, icon); putValue("AcceleratorKey", null); } public void actionPerformed(ActionEvent e) { addActionToUsageUsedList(getClass().getName()); JLbsComponentHelper.ExportBrwToExcel(this.m_SourceComp, (JLbsPopupEventQueue.JLbsPopupEventQueueFieldHolder.getInstance()).m_Context); } } public class TransferToFirmDefinition extends BasicAction { private static final long serialVersionUID = 1L; public TransferToFirmDefinition(String text, Icon icon) { super(text, icon); putValue("AcceleratorKey", null); } public void actionPerformed(ActionEvent e) { addActionToUsageUsedList(getClass().getName()); JLbsComponentHelper.openTransferToFirmWizard(this.m_SourceComp, (JLbsPopupEventQueue.JLbsPopupEventQueueFieldHolder.getInstance()).m_Context); } } public class SwitchPeriodAction extends BasicAction { private static final long serialVersionUID = 1L; public SwitchPeriodAction(String text, Icon icon) { super(text, icon); putValue("AcceleratorKey", null); } public void actionPerformed(ActionEvent e) { addActionToUsageUsedList(getClass().getName()); JLbsComponentHelper.switchPeriod(this.m_SourceComp, (JLbsPopupEventQueue.JLbsPopupEventQueueFieldHolder.getInstance()).m_Context, JLbsPopupEventQueue.this.m_OrjComp); } } public class CustomizeAction extends BasicAction { private static final long serialVersionUID = 1L; public CustomizeAction(String text, Icon icon) { super(text, icon); putValue("AcceleratorKey", null); } public void actionPerformed(ActionEvent e) { addActionToUsageUsedList(getClass().getName()); JLbsComponentHelper.customize(JLbsPopupEventQueue.this.m_RootComp, JLbsPopupEventQueue.this.m_OrjComp, (JLbsPopupEventQueue.JLbsPopupEventQueueFieldHolder.getInstance()).m_Context); } } public class CustomPopupMenuAction extends AbstractAction { private static final long serialVersionUID = 1L; private int m_Tag = 0; private final ILbsComponent m_Component; public void actionPerformed(ActionEvent e) { if (JLbsPopupEventQueue.ms_Listener != null) JLbsPopupEventQueue.ms_Listener.popupActionPerformed(JLbsComponentHelper.getXUIPane((ILbsComponentBase)this.m_Component), this.m_Component, this.m_Tag);  } public boolean isEnabled() { if (JLbsPopupEventQueue.ms_Listener != null) return JLbsPopupEventQueue.ms_Listener.isPopupActionEnabled(JLbsComponentHelper.getXUIPane((ILbsComponentBase)this.m_Component), this.m_Component, this.m_Tag);  return false; } public CustomPopupMenuAction(JLbsStringListItem item, ILbsComponent source) { super(item.Value); putValue("ShortDescription", item.Value); this.m_Component = source; this.m_Tag = item.Tag; } } public class TemplateAction extends AbstractAction { private static final long serialVersionUID = 1L; protected static final int ACTION_START_TEMPLATE = 1; protected static final int ACTION_FINISH_TEMPLATE = 2; protected static final int ACTION_LOAD_TEMPLATE = 3; private final int m_FormUniqueID; private final int m_ActionID; private final Object m_Source; public TemplateAction(String name, int actionID, int formUniqueID, Object source) { super(name); putValue("ShortDescription", name); this.m_ActionID = actionID; this.m_FormUniqueID = formUniqueID; this.m_Source = source; } public void actionPerformed(ActionEvent e) { if (JLbsComponentHelper.isPlayingTest()) return;  switch (this.m_ActionID) { case 1: if (JLbsPopupEventQueue.this.m_XUITemplateManager != null) { JLbsComponentHelper.setCurrentContainer(this.m_Source); JLbsPopupEventQueue.this.m_XUITemplateManager.startTemplate(this.m_FormUniqueID); }  break;case 2: if (JLbsPopupEventQueue.this.m_XUITemplateManager != null) JLbsPopupEventQueue.this.m_XUITemplateManager.finishTemplate(this.m_FormUniqueID);  break;case 3: if (JLbsPopupEventQueue.this.m_XUITemplateManager != null) { JLbsComponentHelper.setCurrentContainer(this.m_Source); JLbsPopupEventQueue.this.m_XUITemplateManager.loadFromTemplate(this.m_FormUniqueID); }  break; }  } public boolean isEnabled() { if (JLbsComponentHelper.isPlayingTest()) return false;  switch (this.m_ActionID) { case 1: if (JLbsPopupEventQueue.this.m_XUITemplateManager != null) return JLbsPopupEventQueue.this.m_XUITemplateManager.canStartTemplate(this.m_FormUniqueID);  return false;case 2: if (JLbsPopupEventQueue.this.m_XUITemplateManager != null) return JLbsPopupEventQueue.this.m_XUITemplateManager.canFinishTemplate(this.m_FormUniqueID);  return false;case 3: if (JLbsPopupEventQueue.this.m_XUITemplateManager != null) return JLbsPopupEventQueue.this.m_XUITemplateManager.canLoadFromTemplate(this.m_FormUniqueID);  return false; }  return super.isEnabled(); } } public static class JLbsPopupEventQueueFieldHolder { public JLbsPopupEventQueueFieldHolder() { this.m_Context = null; }
/*      */     
/*      */     private Object m_Context;
/*      */     public static JLbsPopupEventQueueFieldHolder getInstance() {
/* 3231 */       return (JLbsPopupEventQueueFieldHolder)LbsClassInstanceProvider.getInstanceByClass(JLbsPopupEventQueueFieldHolder.class);
/*      */     } }
/*      */ 
/*      */ }


/* Location:              C:\Users\Furkan\Desktop\logo\Components.jar!\com\lbs\controls\menu\JLbsPopupEventQueue.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */