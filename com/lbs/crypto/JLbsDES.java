/*     */ package com.lbs.crypto;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class JLbsDES
/*     */ {
/*     */   protected class JLbsDESTuple
/*     */   {
/*  20 */     public int L = 0;
/*  21 */     public int R = 0;
/*     */   }
/*     */ 
/*     */   
/*  25 */   protected static int[][] ms_SPBox = new int[][] { { 16843776, 65536, 16843780, 16842756, 66564, 4, 65536, 
/*  26 */         1024, 16843776, 16843780, 1024, 16778244, 16842756, 16777216, 4, 
/*  27 */         1028, 16778240, 16778240, 66560, 66560, 16842752, 16842752, 16778244, 
/*  28 */         65540, 16777220, 16777220, 65540, 1028, 66564, 16777216, 
/*  29 */         65536, 16843780, 4, 16842752, 16843776, 16777216, 16777216, 1024, 
/*  30 */         16842756, 65536, 66560, 16777220, 1024, 4, 16778244, 66564, 
/*  31 */         16843780, 65540, 16842752, 16778244, 16777220, 1028, 66564, 16843776, 
/*  32 */         1028, 16778240, 16778240, 65540, 66560, 16842756 }, { 
/*  33 */         -2146402272, -2147450880, 32768, 1081376, 1048576, 32, -2146435040, -2147450848, 
/*  34 */         -2147483616, -2146402272, -2146402304, Integer.MIN_VALUE, -2147450880, 1048576, 32, -2146435040, 
/*  35 */         1081344, 1048608, -2147450848, Integer.MIN_VALUE, 32768, 1081376, -2146435072, 
/*  36 */         1048608, -2147483616, 1081344, 32800, -2146402304, -2146435072, 32800, 
/*  37 */         1081376, -2146435040, 1048576, -2147450848, -2146435072, -2146402304, 32768, 
/*  38 */         -2146435072, -2147450880, 32, -2146402272, 1081376, 32, 32768, Integer.MIN_VALUE, 
/*  39 */         32800, -2146402304, 1048576, -2147483616, 1048608, -2147450848, -2147483616, 1048608, 
/*  40 */         1081344, -2147450880, 32800, Integer.MIN_VALUE, -2146435040, -2146402272, 1081344 }, { 
/*  41 */         520, 134349312, 134348808, 134218240, 131592, 134218240, 
/*  42 */         131080, 134217736, 134217736, 131072, 134349320, 131080, 134348800, 520, 
/*  43 */         134217728, 8, 134349312, 512, 131584, 134348800, 134348808, 131592, 
/*  44 */         134218248, 131584, 131072, 134218248, 8, 134349320, 512, 134217728, 
/*  45 */         134349312, 134217728, 131080, 520, 131072, 134349312, 134218240, 
/*  46 */         512, 131080, 134349320, 134218240, 134217736, 512, 134348808, 
/*  47 */         134218248, 131072, 134217728, 134349320, 8, 131592, 131584, 134217736, 
/*  48 */         134348800, 134218248, 520, 134348800, 131592, 8, 134348808, 131584 }, { 
/*  49 */         8396801, 8321, 8321, 128, 8396928, 8388737, 8388609, 8193, 
/*  50 */         8396800, 8396800, 8396929, 129, 8388736, 8388609, 
/*  51 */         1, 8192, 8388608, 8396801, 128, 8388608, 8193, 8320, 
/*  52 */         8388737, 1, 8320, 8388736, 8192, 8396928, 8396929, 129, 
/*  53 */         8388736, 8388609, 8396800, 8396929, 129, 8396800, 
/*  54 */         8320, 8388736, 8388737, 1, 8396801, 8321, 8321, 128, 
/*  55 */         8396929, 129, 1, 8192, 8388609, 8193, 8396928, 8388737, 
/*  56 */         8193, 8320, 8388608, 8396801, 128, 8388608, 8192, 8396928 }, { 
/*  57 */         256, 34078976, 34078720, 1107296512, 524288, 256, 1073741824, 34078720, 
/*  58 */         1074266368, 524288, 33554688, 1074266368, 1107296512, 1107820544, 524544, 1073741824, 
/*  59 */         33554432, 1074266112, 1074266112, 1073742080, 1107820800, 1107820800, 33554688, 
/*  60 */         1107820544, 1073742080, 1107296256, 34078976, 33554432, 1107296256, 524544, 
/*  61 */         524288, 1107296512, 256, 33554432, 1073741824, 34078720, 1107296512, 1074266368, 
/*  62 */         33554688, 1073741824, 1107820544, 34078976, 1074266368, 256, 33554432, 1107820544, 
/*  63 */         1107820800, 524544, 1107296256, 1107820800, 34078720, 1074266112, 1107296256, 
/*  64 */         524544, 33554688, 1073742080, 524288, 1074266112, 34078976, 1073742080 }, { 
/*  65 */         536870928, 541065216, 16384, 541081616, 541065216, 16, 541081616, 4194304, 
/*  66 */         536887296, 4210704, 4194304, 536870928, 4194320, 536887296, 536870912, 16400, 
/*  67 */         4194320, 536887312, 16384, 4210688, 536887312, 16, 541065232, 
/*  68 */         541065232, 4210704, 541081600, 16400, 4210688, 541081600, 536870912, 
/*  69 */         536887296, 16, 541065232, 4210688, 541081616, 4194304, 16400, 536870928, 
/*  70 */         4194304, 536887296, 536870912, 16400, 536870928, 541081616, 4210688, 541065216, 
/*  71 */         4210704, 541081600, 541065232, 16, 16384, 541065216, 4210704, 
/*  72 */         16384, 4194320, 536887312, 541081600, 536870912, 4194320, 536887312 }, { 
/*  73 */         2097152, 69206018, 67110914, 2048, 67110914, 2099202, 69208064, 
/*  74 */         69208066, 2097152, 67108866, 2, 67108864, 69206018, 2050, 
/*  75 */         67110912, 2099202, 2097154, 67110912, 67108866, 69206016, 69208064, 2097154, 
/*  76 */         69206016, 2048, 2050, 69208066, 2099200, 2, 67108864, 2099200, 
/*  77 */         67108864, 2099200, 2097152, 67110914, 67110914, 69206018, 69206018, 2, 
/*  78 */         2097154, 67108864, 67110912, 2097152, 69208064, 2050, 2099202, 69208064, 
/*  79 */         2050, 67108866, 69208066, 69206016, 2099200, 2, 69208066, 
/*  80 */         2099202, 69206016, 2048, 67108866, 67110912, 2048, 2097154 }, { 
/*  81 */         268439616, 4096, 262144, 268701760, 268435456, 268439616, 64, 268435456, 
/*  82 */         262208, 268697600, 268701760, 266240, 268701696, 266304, 4096, 64, 
/*  83 */         268697600, 268435520, 268439552, 4160, 266240, 262208, 268697664, 268701696, 
/*  84 */         4160, 268697664, 268435520, 268439552, 266304, 262144, 
/*  85 */         266304, 262144, 268701696, 4096, 64, 268697664, 4096, 266304, 
/*  86 */         268439552, 64, 268435520, 268697600, 268697664, 268435456, 262144, 268439616, 
/*  87 */         268701760, 262208, 268435520, 268697600, 268439552, 268439616, 
/*  88 */         268701760, 266240, 266240, 4160, 4160, 262208, 268435456, 268701696 } };
/*     */ 
/*     */   
/*  91 */   protected JLbsDESContext m_Context = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public JLbsDES() {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public JLbsDES(JLbsDESContext context) {
/* 106 */     this.m_Context = context;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean Encrypt(JLbsDESContext context, byte[] data, int index) throws Exception {
/* 121 */     return internalEncrypt(context, data, index);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean Encrypt(JLbsDESContext context, byte[] data) throws Exception {
/* 134 */     return internalEncrypt(context, data, 0);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean Encrypt(byte[] data) throws Exception {
/* 146 */     return Encrypt(this.m_Context, data);
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   protected int SplitBlock(byte[] data, int offset) throws Exception {
/* 152 */     int i1 = (data[offset + 0] + 256 & 0xFF) << 24;
/* 153 */     int i2 = (data[offset + 1] + 256 & 0xFF) << 16;
/* 154 */     int i3 = (data[offset + 2] + 256 & 0xFF) << 8;
/* 155 */     int i4 = data[offset + 3] + 256 & 0xFF;
/* 156 */     return i1 | i2 | i3 | i4;
/*     */   }
/*     */ 
/*     */   
/*     */   protected boolean JoinBlock(byte[] data, int dataIndex, int L, int R) {
/* 161 */     if (data != null && data.length >= dataIndex + 8) {
/*     */       
/* 163 */       data[dataIndex + 0] = (byte)(R >>> 24);
/* 164 */       data[dataIndex + 1] = (byte)(R >>> 16 & 0xFF);
/* 165 */       data[dataIndex + 2] = (byte)(R >>> 8 & 0xFF);
/* 166 */       data[dataIndex + 3] = (byte)(R & 0xFF);
/* 167 */       data[dataIndex + 4] = (byte)(L >>> 24);
/* 168 */       data[dataIndex + 5] = (byte)(L >>> 16 & 0xFF);
/* 169 */       data[dataIndex + 6] = (byte)(L >>> 8 & 0xFF);
/* 170 */       data[dataIndex + 7] = (byte)(L & 0xFF);
/* 171 */       return true;
/*     */     } 
/* 173 */     return false;
/*     */   }
/*     */ 
/*     */   
/*     */   protected boolean IPerm(JLbsDESTuple tuple) {
/* 178 */     if (tuple != null) {
/*     */       
/* 180 */       int L = tuple.L, R = tuple.R;
/* 181 */       int iWork = (L >>> 4 ^ R) & 0xF0F0F0F;
/* 182 */       R ^= iWork;
/* 183 */       L ^= iWork << 4;
/*     */       
/* 185 */       iWork = (L >> 16 ^ R) & 0xFFFF;
/* 186 */       R ^= iWork;
/* 187 */       L ^= iWork << 16;
/*     */       
/* 189 */       iWork = (R >>> 2 ^ L) & 0x33333333;
/* 190 */       L ^= iWork;
/* 191 */       R ^= iWork << 2;
/*     */       
/* 193 */       iWork = (R >>> 8 ^ L) & 0xFF00FF;
/* 194 */       L ^= iWork;
/* 195 */       R ^= iWork << 8;
/*     */       
/* 197 */       R = R << 1 | R >>> 31;
/* 198 */       iWork = (L ^ R) & 0xAAAAAAAA;
/* 199 */       L ^= iWork;
/* 200 */       R ^= iWork;
/* 201 */       L = L << 1 | L >>> 31;
/*     */       
/* 203 */       tuple.L = L;
/* 204 */       tuple.R = R;
/* 205 */       return true;
/*     */     } 
/* 207 */     return false;
/*     */   }
/*     */ 
/*     */   
/*     */   protected boolean FPerm(JLbsDESTuple tuple) {
/* 212 */     if (tuple != null) {
/*     */       
/* 214 */       int L = tuple.L, R = tuple.R;
/*     */       
/* 216 */       R = R << 31 | R >>> 1;
/* 217 */       int iWork = (L ^ R) & 0xAAAAAAAA;
/* 218 */       L ^= iWork;
/* 219 */       R ^= iWork;
/* 220 */       L = L >>> 1 | L << 31;
/*     */       
/* 222 */       iWork = (L >>> 8 ^ R) & 0xFF00FF;
/* 223 */       R ^= iWork;
/* 224 */       L ^= iWork << 8;
/*     */       
/* 226 */       iWork = (L >>> 2 ^ R) & 0x33333333;
/* 227 */       R ^= iWork;
/* 228 */       L ^= iWork << 2;
/*     */       
/* 230 */       iWork = (R >>> 16 ^ L) & 0xFFFF;
/* 231 */       L ^= iWork;
/* 232 */       R ^= iWork << 16;
/*     */       
/* 234 */       iWork = (R >>> 4 ^ L) & 0xF0F0F0F;
/* 235 */       L ^= iWork;
/* 236 */       R ^= iWork << 4;
/*     */       
/* 238 */       tuple.L = L;
/* 239 */       tuple.R = R;
/* 240 */       return true;
/*     */     } 
/* 242 */     return false;
/*     */   }
/*     */ 
/*     */   
/*     */   protected boolean internalEncrypt(JLbsDESContext context, byte[] data, int dataIndex) throws Exception {
/* 247 */     if (context == null)
/* 248 */       throw new Exception("JLbsDES: The context information is not valid!"); 
/* 249 */     if (data == null || data.length < dataIndex + 8)
/* 250 */       throw new Exception("JLbsDES: Encrypt/Decrypt data is not valid!"); 
/* 251 */     JLbsDESTuple tuple = new JLbsDESTuple();
/* 252 */     tuple.L = SplitBlock(data, dataIndex);
/* 253 */     tuple.R = SplitBlock(data, dataIndex + 4);
/* 254 */     IPerm(tuple);
/* 255 */     int[] transformKey = context.getTransformKey();
/* 256 */     int L = tuple.L, R = tuple.R, iTransIndex = 0;
/*     */ 
/*     */     
/* 259 */     for (int i = 0; i < 8; i++) {
/*     */       
/* 261 */       int iWork = (R >>> 4 | R << 28) ^ transformKey[iTransIndex];
/* 262 */       iTransIndex++;
/* 263 */       L ^= ms_SPBox[6][iWork & 0x3F];
/* 264 */       L ^= ms_SPBox[4][iWork >>> 8 & 0x3F];
/* 265 */       L ^= ms_SPBox[2][iWork >>> 16 & 0x3F];
/* 266 */       L ^= ms_SPBox[0][iWork >>> 24 & 0x3F];
/*     */       
/* 268 */       iWork = R ^ transformKey[iTransIndex];
/* 269 */       iTransIndex++;
/* 270 */       L ^= ms_SPBox[7][iWork & 0x3F];
/* 271 */       L ^= ms_SPBox[5][iWork >>> 8 & 0x3F];
/* 272 */       L ^= ms_SPBox[3][iWork >>> 16 & 0x3F];
/* 273 */       L ^= ms_SPBox[1][iWork >>> 24 & 0x3F];
/*     */       
/* 275 */       iWork = (L >>> 4 | L << 28) ^ transformKey[iTransIndex];
/* 276 */       iTransIndex++;
/* 277 */       R ^= ms_SPBox[6][iWork & 0x3F];
/* 278 */       R ^= ms_SPBox[4][iWork >>> 8 & 0x3F];
/* 279 */       R ^= ms_SPBox[2][iWork >>> 16 & 0x3F];
/* 280 */       R ^= ms_SPBox[0][iWork >>> 24 & 0x3F];
/*     */       
/* 282 */       iWork = L ^ transformKey[iTransIndex];
/* 283 */       iTransIndex++;
/* 284 */       R ^= ms_SPBox[7][iWork & 0x3F];
/* 285 */       R ^= ms_SPBox[5][iWork >>> 8 & 0x3F];
/* 286 */       R ^= ms_SPBox[3][iWork >>> 16 & 0x3F];
/* 287 */       R ^= ms_SPBox[1][iWork >>> 24 & 0x3F];
/*     */     } 
/* 289 */     tuple.L = L;
/* 290 */     tuple.R = R;
/* 291 */     FPerm(tuple);
/* 292 */     JoinBlock(data, dataIndex, tuple.L, tuple.R);
/* 293 */     return true;
/*     */   }
/*     */ }


/* Location:              C:\Users\Furkan\Desktop\logo\Components.jar!\com\lbs\crypto\JLbsDES.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */